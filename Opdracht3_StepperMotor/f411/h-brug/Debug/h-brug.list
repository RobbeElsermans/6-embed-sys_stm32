
h-brug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041dc  080041dc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041e4  080041e4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041e4  080041e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041e8  080041e8  000141e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080041ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000074  08004260  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004260  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4f4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e1  00000000  00000000  0002c598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002de80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002ea28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000017e9  00000000  00000000  0002f538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cac6  00000000  00000000  00030d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bdf2  00000000  00000000  0003d7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c95d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003830  00000000  00000000  000c962c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003fd4 	.word	0x08003fd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003fd4 	.word	0x08003fd4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b08e      	sub	sp, #56	; 0x38
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fca7 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f841 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f99f 	bl	8000904 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f973 	bl	80008b0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80005ca:	f000 f925 	bl	8000818 <MX_TIM4_Init>
  MX_TIM3_Init();
 80005ce:	f000 f8a3 	bl	8000718 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char text[50] = "on->EN_M, off->DIS_M, [-100, 100]->pwm";
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <main+0x7c>)
 80005d4:	1d3c      	adds	r4, r7, #4
 80005d6:	461d      	mov	r5, r3
 80005d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005e4:	6020      	str	r0, [r4, #0]
 80005e6:	3404      	adds	r4, #4
 80005e8:	8021      	strh	r1, [r4, #0]
 80005ea:	3402      	adds	r4, #2
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	7023      	strb	r3, [r4, #0]
 80005f0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	f8c3 2007 	str.w	r2, [r3, #7]
  HAL_UART_Transmit(&huart2,text,sizeof(text),timeout);
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <main+0x80>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1d39      	adds	r1, r7, #4
 8000604:	2232      	movs	r2, #50	; 0x32
 8000606:	480c      	ldr	r0, [pc, #48]	; (8000638 <main+0x84>)
 8000608:	f002 fa9b 	bl	8002b42 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,nextLine,sizeof(nextLine),timeout);
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <main+0x80>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2202      	movs	r2, #2
 8000612:	490a      	ldr	r1, [pc, #40]	; (800063c <main+0x88>)
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <main+0x84>)
 8000616:	f002 fa94 	bl	8002b42 <HAL_UART_Transmit>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800061a:	2100      	movs	r1, #0
 800061c:	4808      	ldr	r0, [pc, #32]	; (8000640 <main+0x8c>)
 800061e:	f001 fccf 	bl	8001fc0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000622:	2104      	movs	r1, #4
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <main+0x8c>)
 8000626:	f001 fccb 	bl	8001fc0 <HAL_TIM_PWM_Start>
	  //pwmSweep();

	  //vraag data op van de gebruiker
	  //Dit ligt tussen de -100 en 100.
	  // -100 is volledig links en 100 is volledig rechts.
	  pwmConsole();
 800062a:	f000 fa01 	bl	8000a30 <pwmConsole>
 800062e:	e7fc      	b.n	800062a <main+0x76>
 8000630:	08003fec 	.word	0x08003fec
 8000634:	20000000 	.word	0x20000000
 8000638:	20000120 	.word	0x20000120
 800063c:	08004040 	.word	0x08004040
 8000640:	20000090 	.word	0x20000090

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 feb6 	bl	80033c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b4:	2310      	movs	r3, #16
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006be:	2304      	movs	r3, #4
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 ff38 	bl	8001540 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006d6:	f000 fa95 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2102      	movs	r1, #2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f99a 	bl	8001a30 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 fa7f 	bl	8000c04 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	; 0x38
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
 8000744:	615a      	str	r2, [r3, #20]
 8000746:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000748:	4b31      	ldr	r3, [pc, #196]	; (8000810 <MX_TIM3_Init+0xf8>)
 800074a:	4a32      	ldr	r2, [pc, #200]	; (8000814 <MX_TIM3_Init+0xfc>)
 800074c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800074e:	4b30      	ldr	r3, [pc, #192]	; (8000810 <MX_TIM3_Init+0xf8>)
 8000750:	2253      	movs	r2, #83	; 0x53
 8000752:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000754:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <MX_TIM3_Init+0xf8>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_TIM3_Init+0xf8>)
 800075c:	2264      	movs	r2, #100	; 0x64
 800075e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_TIM3_Init+0xf8>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_TIM3_Init+0xf8>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800076c:	4828      	ldr	r0, [pc, #160]	; (8000810 <MX_TIM3_Init+0xf8>)
 800076e:	f001 fb7f 	bl	8001e70 <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000778:	f000 fa44 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000786:	4619      	mov	r1, r3
 8000788:	4821      	ldr	r0, [pc, #132]	; (8000810 <MX_TIM3_Init+0xf8>)
 800078a:	f001 fd8b 	bl	80022a4 <HAL_TIM_ConfigClockSource>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000794:	f000 fa36 	bl	8000c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000798:	481d      	ldr	r0, [pc, #116]	; (8000810 <MX_TIM3_Init+0xf8>)
 800079a:	f001 fbb8 	bl	8001f0e <HAL_TIM_PWM_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80007a4:	f000 fa2e 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4619      	mov	r1, r3
 80007b6:	4816      	ldr	r0, [pc, #88]	; (8000810 <MX_TIM3_Init+0xf8>)
 80007b8:	f002 f908 	bl	80029cc <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80007c2:	f000 fa1f 	bl	8000c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c6:	2360      	movs	r3, #96	; 0x60
 80007c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	4619      	mov	r1, r3
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_TIM3_Init+0xf8>)
 80007de:	f001 fc9f 	bl	8002120 <HAL_TIM_PWM_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80007e8:	f000 fa0c 	bl	8000c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2204      	movs	r2, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <MX_TIM3_Init+0xf8>)
 80007f4:	f001 fc94 	bl	8002120 <HAL_TIM_PWM_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80007fe:	f000 fa01 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <MX_TIM3_Init+0xf8>)
 8000804:	f000 fa64 	bl	8000cd0 <HAL_TIM_MspPostInit>

}
 8000808:	bf00      	nop
 800080a:	3738      	adds	r7, #56	; 0x38
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000090 	.word	0x20000090
 8000814:	40000400 	.word	0x40000400

08000818 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_TIM4_Init+0x90>)
 8000836:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <MX_TIM4_Init+0x94>)
 8000838:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_TIM4_Init+0x90>)
 800083c:	2253      	movs	r2, #83	; 0x53
 800083e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_TIM4_Init+0x90>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_TIM4_Init+0x90>)
 8000848:	2264      	movs	r2, #100	; 0x64
 800084a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_TIM4_Init+0x90>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_TIM4_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000858:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_TIM4_Init+0x90>)
 800085a:	f001 fb09 	bl	8001e70 <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000864:	f000 f9ce 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_TIM4_Init+0x90>)
 8000876:	f001 fd15 	bl	80022a4 <HAL_TIM_ConfigClockSource>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000880:	f000 f9c0 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_TIM4_Init+0x90>)
 8000892:	f002 f89b 	bl	80029cc <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 800089c:	f000 f9b2 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000d8 	.word	0x200000d8
 80008ac:	40000800 	.word	0x40000800

080008b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_USART2_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e8:	f002 f8de 	bl	8002aa8 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f987 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000120 	.word	0x20000120
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <MX_GPIO_Init+0x11c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a3f      	ldr	r2, [pc, #252]	; (8000a20 <MX_GPIO_Init+0x11c>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <MX_GPIO_Init+0x11c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b39      	ldr	r3, [pc, #228]	; (8000a20 <MX_GPIO_Init+0x11c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a38      	ldr	r2, [pc, #224]	; (8000a20 <MX_GPIO_Init+0x11c>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <MX_GPIO_Init+0x11c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <MX_GPIO_Init+0x11c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a31      	ldr	r2, [pc, #196]	; (8000a20 <MX_GPIO_Init+0x11c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <MX_GPIO_Init+0x11c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <MX_GPIO_Init+0x11c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a2a      	ldr	r2, [pc, #168]	; (8000a20 <MX_GPIO_Init+0x11c>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_GPIO_Init+0x11c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_VCC_EN_GPIO_Port, M_VCC_EN_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	4825      	ldr	r0, [pc, #148]	; (8000a24 <MX_GPIO_Init+0x120>)
 8000990:	f000 fdbc 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_RIGHT_EN_GPIO_Port, M_RIGHT_EN_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	4823      	ldr	r0, [pc, #140]	; (8000a28 <MX_GPIO_Init+0x124>)
 800099a:	f000 fdb7 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_LEFT_EN_GPIO_Port, M_LEFT_EN_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	4822      	ldr	r0, [pc, #136]	; (8000a2c <MX_GPIO_Init+0x128>)
 80009a4:	f000 fdb2 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	481a      	ldr	r0, [pc, #104]	; (8000a28 <MX_GPIO_Init+0x124>)
 80009c0:	f000 fc20 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : M_VCC_EN_Pin */
  GPIO_InitStruct.Pin = M_VCC_EN_Pin;
 80009c4:	2320      	movs	r3, #32
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_VCC_EN_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	4812      	ldr	r0, [pc, #72]	; (8000a24 <MX_GPIO_Init+0x120>)
 80009dc:	f000 fc12 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : M_RIGHT_EN_Pin */
  GPIO_InitStruct.Pin = M_RIGHT_EN_Pin;
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_RIGHT_EN_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_GPIO_Init+0x124>)
 80009f8:	f000 fc04 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : M_LEFT_EN_Pin */
  GPIO_InitStruct.Pin = M_LEFT_EN_Pin;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_LEFT_EN_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_GPIO_Init+0x128>)
 8000a14:	f000 fbf6 	bl	8001204 <HAL_GPIO_Init>

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020400 	.word	0x40020400

08000a30 <pwmConsole>:

		  HAL_Delay(100);
	  }
}

void pwmConsole(){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	if(karakter != 13){//Zolang er geen enter is geweest, blijven kijken.
 8000a36:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <pwmConsole+0xf0>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b0d      	cmp	r3, #13
 8000a3c:	d023      	beq.n	8000a86 <pwmConsole+0x56>
		HAL_UART_Receive(&huart2,&karakter,4,timeout);
 8000a3e:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <pwmConsole+0xf4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2204      	movs	r2, #4
 8000a44:	4936      	ldr	r1, [pc, #216]	; (8000b20 <pwmConsole+0xf0>)
 8000a46:	4838      	ldr	r0, [pc, #224]	; (8000b28 <pwmConsole+0xf8>)
 8000a48:	f002 f90d 	bl	8002c66 <HAL_UART_Receive>
		if(karakter != 0 && karakter != 13 && index < sizeof(buffer)){ //Als er een input is geweest en het is geen enter en de index is klener dan de buffer, verhoog de counter.
 8000a4c:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <pwmConsole+0xf0>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d05e      	beq.n	8000b12 <pwmConsole+0xe2>
 8000a54:	4b32      	ldr	r3, [pc, #200]	; (8000b20 <pwmConsole+0xf0>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b0d      	cmp	r3, #13
 8000a5a:	d05a      	beq.n	8000b12 <pwmConsole+0xe2>
 8000a5c:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <pwmConsole+0xfc>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d856      	bhi.n	8000b12 <pwmConsole+0xe2>
			buffer[index] = karakter;
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <pwmConsole+0xfc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <pwmConsole+0xf0>)
 8000a6c:	7819      	ldrb	r1, [r3, #0]
 8000a6e:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <pwmConsole+0x100>)
 8000a70:	5499      	strb	r1, [r3, r2]
		  	index++;
 8000a72:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <pwmConsole+0xfc>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <pwmConsole+0xfc>)
 8000a7c:	701a      	strb	r2, [r3, #0]
		  	karakter = 0;
 8000a7e:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <pwmConsole+0xf0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
 8000a84:	e045      	b.n	8000b12 <pwmConsole+0xe2>
		}
	}
	else if (karakter == 13){ // Er is een enter geweest
 8000a86:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <pwmConsole+0xf0>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b0d      	cmp	r3, #13
 8000a8c:	d141      	bne.n	8000b12 <pwmConsole+0xe2>
		HAL_UART_Transmit(&huart2,buffer,sizeof(buffer),timeout);
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <pwmConsole+0xf4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2205      	movs	r2, #5
 8000a94:	4926      	ldr	r1, [pc, #152]	; (8000b30 <pwmConsole+0x100>)
 8000a96:	4824      	ldr	r0, [pc, #144]	; (8000b28 <pwmConsole+0xf8>)
 8000a98:	f002 f853 	bl	8002b42 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,nextLine,sizeof(nextLine),timeout);
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <pwmConsole+0xf4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	4924      	ldr	r1, [pc, #144]	; (8000b34 <pwmConsole+0x104>)
 8000aa4:	4820      	ldr	r0, [pc, #128]	; (8000b28 <pwmConsole+0xf8>)
 8000aa6:	f002 f84c 	bl	8002b42 <HAL_UART_Transmit>

		if(strcmp(buffer, on) == 0){
 8000aaa:	4923      	ldr	r1, [pc, #140]	; (8000b38 <pwmConsole+0x108>)
 8000aac:	4820      	ldr	r0, [pc, #128]	; (8000b30 <pwmConsole+0x100>)
 8000aae:	f7ff fb97 	bl	80001e0 <strcmp>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d105      	bne.n	8000ac4 <pwmConsole+0x94>
			HAL_GPIO_WritePin(M_VCC_EN_GPIO_Port, M_VCC_EN_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2120      	movs	r1, #32
 8000abc:	481f      	ldr	r0, [pc, #124]	; (8000b3c <pwmConsole+0x10c>)
 8000abe:	f000 fd25 	bl	800150c <HAL_GPIO_WritePin>
 8000ac2:	e013      	b.n	8000aec <pwmConsole+0xbc>
		}
		else if(strcmp(buffer, off) == 0)
 8000ac4:	491e      	ldr	r1, [pc, #120]	; (8000b40 <pwmConsole+0x110>)
 8000ac6:	481a      	ldr	r0, [pc, #104]	; (8000b30 <pwmConsole+0x100>)
 8000ac8:	f7ff fb8a 	bl	80001e0 <strcmp>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d105      	bne.n	8000ade <pwmConsole+0xae>
		{
			HAL_GPIO_WritePin(M_VCC_EN_GPIO_Port, M_VCC_EN_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4819      	ldr	r0, [pc, #100]	; (8000b3c <pwmConsole+0x10c>)
 8000ad8:	f000 fd18 	bl	800150c <HAL_GPIO_WritePin>
 8000adc:	e006      	b.n	8000aec <pwmConsole+0xbc>
		}
		else
		{
		//het is een PWM waarde
			sscanf(buffer, "%d", &pwm);
 8000ade:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <pwmConsole+0x114>)
 8000ae0:	4919      	ldr	r1, [pc, #100]	; (8000b48 <pwmConsole+0x118>)
 8000ae2:	4813      	ldr	r0, [pc, #76]	; (8000b30 <pwmConsole+0x100>)
 8000ae4:	f002 fc76 	bl	80033d4 <siscanf>
			doActionPwm();
 8000ae8:	f000 f830 	bl	8000b4c <doActionPwm>
		}

		// Maak buffer leeg.
		for(uint8_t i = 0; i < sizeof(buffer); i++){
 8000aec:	2300      	movs	r3, #0
 8000aee:	71fb      	strb	r3, [r7, #7]
 8000af0:	e006      	b.n	8000b00 <pwmConsole+0xd0>
			buffer[i] = 0;
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <pwmConsole+0x100>)
 8000af6:	2100      	movs	r1, #0
 8000af8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < sizeof(buffer); i++){
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	3301      	adds	r3, #1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	d9f5      	bls.n	8000af2 <pwmConsole+0xc2>
		}
		index = 0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <pwmConsole+0xfc>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
		karakter = 0;
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <pwmConsole+0xf0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
		}

	HAL_Delay(10);
 8000b12:	200a      	movs	r0, #10
 8000b14:	f000 fa6c 	bl	8000ff0 <HAL_Delay>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000016a 	.word	0x2000016a
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000120 	.word	0x20000120
 8000b2c:	20000169 	.word	0x20000169
 8000b30:	20000164 	.word	0x20000164
 8000b34:	08004040 	.word	0x08004040
 8000b38:	08004030 	.word	0x08004030
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	08004038 	.word	0x08004038
 8000b44:	2000016c 	.word	0x2000016c
 8000b48:	08004020 	.word	0x08004020

08000b4c <doActionPwm>:

void doActionPwm(void){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	if(pwm < 0 && pwm >= -100){
 8000b50:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <doActionPwm+0xa8>)
 8000b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	da18      	bge.n	8000b8c <doActionPwm+0x40>
 8000b5a:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <doActionPwm+0xa8>)
 8000b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b60:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000b64:	db12      	blt.n	8000b8c <doActionPwm+0x40>
		//ga naar links
		HAL_GPIO_WritePin(M_RIGHT_EN_GPIO_Port,M_RIGHT_Pin, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	4823      	ldr	r0, [pc, #140]	; (8000bf8 <doActionPwm+0xac>)
 8000b6c:	f000 fcce 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_LEFT_EN_GPIO_Port,M_LEFT_Pin, 1);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2140      	movs	r1, #64	; 0x40
 8000b74:	4821      	ldr	r0, [pc, #132]	; (8000bfc <doActionPwm+0xb0>)
 8000b76:	f000 fcc9 	bl	800150c <HAL_GPIO_WritePin>
		TIM3->CCR2 = 0;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <doActionPwm+0xb4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = (pwm*(-1));  //positief maken
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <doActionPwm+0xa8>)
 8000b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b86:	425a      	negs	r2, r3
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <doActionPwm+0xb4>)
 8000b8a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(pwm > 0 && pwm <=100){
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <doActionPwm+0xa8>)
 8000b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	dd16      	ble.n	8000bc4 <doActionPwm+0x78>
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <doActionPwm+0xa8>)
 8000b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b9c:	2b64      	cmp	r3, #100	; 0x64
 8000b9e:	dc11      	bgt.n	8000bc4 <doActionPwm+0x78>
		//ga naar rechts
		HAL_GPIO_WritePin(M_RIGHT_EN_GPIO_Port,M_RIGHT_Pin, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <doActionPwm+0xac>)
 8000ba6:	f000 fcb1 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_LEFT_EN_GPIO_Port,M_LEFT_Pin, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2140      	movs	r1, #64	; 0x40
 8000bae:	4813      	ldr	r0, [pc, #76]	; (8000bfc <doActionPwm+0xb0>)
 8000bb0:	f000 fcac 	bl	800150c <HAL_GPIO_WritePin>
		TIM3->CCR2 = pwm;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <doActionPwm+0xa8>)
 8000bb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <doActionPwm+0xb4>)
 8000bbc:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = 0;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <doActionPwm+0xb4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(pwm == 0){
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <doActionPwm+0xa8>)
 8000bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10f      	bne.n	8000bee <doActionPwm+0xa2>
		//stop
		HAL_GPIO_WritePin(M_RIGHT_EN_GPIO_Port,M_RIGHT_Pin, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <doActionPwm+0xac>)
 8000bd4:	f000 fc9a 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_LEFT_EN_GPIO_Port,M_LEFT_Pin, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <doActionPwm+0xb0>)
 8000bde:	f000 fc95 	bl	800150c <HAL_GPIO_WritePin>
		TIM3->CCR2 = 0;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <doActionPwm+0xb4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = 0;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <doActionPwm+0xb4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000016c 	.word	0x2000016c
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	40000400 	.word	0x40000400

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c4e:	2007      	movs	r0, #7
 8000c50:	f000 faa4 	bl	800119c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <HAL_TIM_Base_MspInit+0x64>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d10e      	bne.n	8000c90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_TIM_Base_MspInit+0x68>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a13      	ldr	r2, [pc, #76]	; (8000cc8 <HAL_TIM_Base_MspInit+0x68>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_TIM_Base_MspInit+0x68>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c8e:	e012      	b.n	8000cb6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_TIM_Base_MspInit+0x6c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d10d      	bne.n	8000cb6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_TIM_Base_MspInit+0x68>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <HAL_TIM_Base_MspInit+0x68>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <HAL_TIM_Base_MspInit+0x68>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40000400 	.word	0x40000400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40000800 	.word	0x40000800

08000cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <HAL_TIM_MspPostInit+0x68>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d11d      	bne.n	8000d2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_TIM_MspPostInit+0x6c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_TIM_MspPostInit+0x6c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_TIM_MspPostInit+0x6c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M_LEFT_Pin|M_RIGHT_Pin;
 8000d0e:	23c0      	movs	r3, #192	; 0xc0
 8000d10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_TIM_MspPostInit+0x70>)
 8000d2a:	f000 fa6b 	bl	8001204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40000400 	.word	0x40000400
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_UART_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12b      	bne.n	8000dbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dae:	2307      	movs	r3, #7
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000dba:	f000 fa23 	bl	8001204 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <NMI_Handler+0x4>

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <MemManage_Handler+0x4>

08000de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 f8c6 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f002 fa8a 	bl	8003370 <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20020000 	.word	0x20020000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	20000170 	.word	0x20000170
 8000e90:	20000188 	.word	0x20000188

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ebe:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed4:	4c0b      	ldr	r4, [pc, #44]	; (8000f04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ee2:	f7ff ffd7 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f002 fa49 	bl	800337c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fb63 	bl	80005b4 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000efc:	080041ec 	.word	0x080041ec
  ldr r2, =_sbss
 8000f00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f04:	20000188 	.word	0x20000188

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f931 	bl	800119c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fe66 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f93b 	bl	80011ea <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f8c:	f000 f911 	bl	80011b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	2000000c 	.word	0x2000000c
 8000fac:	20000008 	.word	0x20000008

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000000c 	.word	0x2000000c
 8000fd4:	20000174 	.word	0x20000174

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000174 	.word	0x20000174

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff ffee 	bl	8000fd8 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffde 	bl	8000fd8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000000c 	.word	0x2000000c

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	; (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001168:	d301      	bcc.n	800116e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116a:	2301      	movs	r3, #1
 800116c:	e00f      	b.n	800118e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <SysTick_Config+0x40>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001176:	210f      	movs	r1, #15
 8001178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800117c:	f7ff ff8e 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Config+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SysTick_Config+0x40>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff47 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff5c 	bl	8001080 <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff8e 	bl	80010f0 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5d 	bl	800109c <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffb0 	bl	8001158 <SysTick_Config>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	e159      	b.n	80014d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	f040 8148 	bne.w	80014ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d005      	beq.n	8001256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	2b02      	cmp	r3, #2
 8001254:	d130      	bne.n	80012b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 0201 	and.w	r2, r3, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d017      	beq.n	80012f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d123      	bne.n	8001348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	69b9      	ldr	r1, [r7, #24]
 8001344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80a2 	beq.w	80014ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b57      	ldr	r3, [pc, #348]	; (80014ec <HAL_GPIO_Init+0x2e8>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a56      	ldr	r2, [pc, #344]	; (80014ec <HAL_GPIO_Init+0x2e8>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b54      	ldr	r3, [pc, #336]	; (80014ec <HAL_GPIO_Init+0x2e8>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a6:	4a52      	ldr	r2, [pc, #328]	; (80014f0 <HAL_GPIO_Init+0x2ec>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a49      	ldr	r2, [pc, #292]	; (80014f4 <HAL_GPIO_Init+0x2f0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x202>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a48      	ldr	r2, [pc, #288]	; (80014f8 <HAL_GPIO_Init+0x2f4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x1fe>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a47      	ldr	r2, [pc, #284]	; (80014fc <HAL_GPIO_Init+0x2f8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x1fa>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a46      	ldr	r2, [pc, #280]	; (8001500 <HAL_GPIO_Init+0x2fc>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x1f6>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a45      	ldr	r2, [pc, #276]	; (8001504 <HAL_GPIO_Init+0x300>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x1f2>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e008      	b.n	8001408 <HAL_GPIO_Init+0x204>
 80013f6:	2307      	movs	r3, #7
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x204>
 80013fa:	2303      	movs	r3, #3
 80013fc:	e004      	b.n	8001408 <HAL_GPIO_Init+0x204>
 80013fe:	2302      	movs	r3, #2
 8001400:	e002      	b.n	8001408 <HAL_GPIO_Init+0x204>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x204>
 8001406:	2300      	movs	r3, #0
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	f002 0203 	and.w	r2, r2, #3
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	4093      	lsls	r3, r2
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001418:	4935      	ldr	r1, [pc, #212]	; (80014f0 <HAL_GPIO_Init+0x2ec>)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001426:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_GPIO_Init+0x304>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144a:	4a2f      	ldr	r2, [pc, #188]	; (8001508 <HAL_GPIO_Init+0x304>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001450:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <HAL_GPIO_Init+0x304>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001474:	4a24      	ldr	r2, [pc, #144]	; (8001508 <HAL_GPIO_Init+0x304>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_GPIO_Init+0x304>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149e:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <HAL_GPIO_Init+0x304>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_GPIO_Init+0x304>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_GPIO_Init+0x304>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3301      	adds	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	f67f aea2 	bls.w	8001220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40013800 	.word	0x40013800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020c00 	.word	0x40020c00
 8001504:	40021000 	.word	0x40021000
 8001508:	40013c00 	.word	0x40013c00

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	619a      	str	r2, [r3, #24]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e267      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d075      	beq.n	800164a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800155e:	4b88      	ldr	r3, [pc, #544]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b04      	cmp	r3, #4
 8001568:	d00c      	beq.n	8001584 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800156a:	4b85      	ldr	r3, [pc, #532]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001572:	2b08      	cmp	r3, #8
 8001574:	d112      	bne.n	800159c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001576:	4b82      	ldr	r3, [pc, #520]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001582:	d10b      	bne.n	800159c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001584:	4b7e      	ldr	r3, [pc, #504]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d05b      	beq.n	8001648 <HAL_RCC_OscConfig+0x108>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d157      	bne.n	8001648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e242      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x74>
 80015a6:	4b76      	ldr	r3, [pc, #472]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a75      	ldr	r2, [pc, #468]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e01d      	b.n	80015f0 <HAL_RCC_OscConfig+0xb0>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x98>
 80015be:	4b70      	ldr	r3, [pc, #448]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a6f      	ldr	r2, [pc, #444]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b6d      	ldr	r3, [pc, #436]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6c      	ldr	r2, [pc, #432]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e00b      	b.n	80015f0 <HAL_RCC_OscConfig+0xb0>
 80015d8:	4b69      	ldr	r3, [pc, #420]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a68      	ldr	r2, [pc, #416]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b66      	ldr	r3, [pc, #408]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a65      	ldr	r2, [pc, #404]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fcee 	bl	8000fd8 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fcea 	bl	8000fd8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e207      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b5b      	ldr	r3, [pc, #364]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0xc0>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fcda 	bl	8000fd8 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fcd6 	bl	8000fd8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e1f3      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0xe8>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d063      	beq.n	800171e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00b      	beq.n	800167a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800166a:	2b08      	cmp	r3, #8
 800166c:	d11c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166e:	4b44      	ldr	r3, [pc, #272]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d116      	bne.n	80016a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	4b41      	ldr	r3, [pc, #260]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_RCC_OscConfig+0x152>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d001      	beq.n	8001692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e1c7      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001692:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4937      	ldr	r1, [pc, #220]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a6:	e03a      	b.n	800171e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d020      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b0:	4b34      	ldr	r3, [pc, #208]	; (8001784 <HAL_RCC_OscConfig+0x244>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b6:	f7ff fc8f 	bl	8000fd8 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016be:	f7ff fc8b 	bl	8000fd8 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1a8      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4925      	ldr	r1, [pc, #148]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
 80016f0:	e015      	b.n	800171e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <HAL_RCC_OscConfig+0x244>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fc6e 	bl	8000fd8 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001700:	f7ff fc6a 	bl	8000fd8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e187      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d036      	beq.n	8001798 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d016      	beq.n	8001760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_RCC_OscConfig+0x248>)
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fc4e 	bl	8000fd8 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001740:	f7ff fc4a 	bl	8000fd8 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e167      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x200>
 800175e:	e01b      	b.n	8001798 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_OscConfig+0x248>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff fc37 	bl	8000fd8 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	e00e      	b.n	800178c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff fc33 	bl	8000fd8 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d907      	bls.n	800178c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e150      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
 8001780:	40023800 	.word	0x40023800
 8001784:	42470000 	.word	0x42470000
 8001788:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178c:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1ea      	bne.n	800176e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 8097 	beq.w	80018d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017aa:	4b81      	ldr	r3, [pc, #516]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10f      	bne.n	80017d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	4b7d      	ldr	r3, [pc, #500]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a7c      	ldr	r2, [pc, #496]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b7a      	ldr	r3, [pc, #488]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017d2:	2301      	movs	r3, #1
 80017d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	4b77      	ldr	r3, [pc, #476]	; (80019b4 <HAL_RCC_OscConfig+0x474>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d118      	bne.n	8001814 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017e2:	4b74      	ldr	r3, [pc, #464]	; (80019b4 <HAL_RCC_OscConfig+0x474>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a73      	ldr	r2, [pc, #460]	; (80019b4 <HAL_RCC_OscConfig+0x474>)
 80017e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fbf3 	bl	8000fd8 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f6:	f7ff fbef 	bl	8000fd8 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e10c      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	4b6a      	ldr	r3, [pc, #424]	; (80019b4 <HAL_RCC_OscConfig+0x474>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x2ea>
 800181c:	4b64      	ldr	r3, [pc, #400]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	4a63      	ldr	r2, [pc, #396]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6713      	str	r3, [r2, #112]	; 0x70
 8001828:	e01c      	b.n	8001864 <HAL_RCC_OscConfig+0x324>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b05      	cmp	r3, #5
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0x30c>
 8001832:	4b5f      	ldr	r3, [pc, #380]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001836:	4a5e      	ldr	r2, [pc, #376]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6713      	str	r3, [r2, #112]	; 0x70
 800183e:	4b5c      	ldr	r3, [pc, #368]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a5b      	ldr	r2, [pc, #364]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	e00b      	b.n	8001864 <HAL_RCC_OscConfig+0x324>
 800184c:	4b58      	ldr	r3, [pc, #352]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001850:	4a57      	ldr	r2, [pc, #348]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6713      	str	r3, [r2, #112]	; 0x70
 8001858:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	4a54      	ldr	r2, [pc, #336]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800185e:	f023 0304 	bic.w	r3, r3, #4
 8001862:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d015      	beq.n	8001898 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff fbb4 	bl	8000fd8 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001872:	e00a      	b.n	800188a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001874:	f7ff fbb0 	bl	8000fd8 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e0cb      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0ee      	beq.n	8001874 <HAL_RCC_OscConfig+0x334>
 8001896:	e014      	b.n	80018c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001898:	f7ff fb9e 	bl	8000fd8 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a0:	f7ff fb9a 	bl	8000fd8 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e0b5      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b6:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1ee      	bne.n	80018a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c8:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4a38      	ldr	r2, [pc, #224]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80018ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80a1 	beq.w	8001a20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018de:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d05c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d141      	bne.n	8001976 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <HAL_RCC_OscConfig+0x478>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fb6e 	bl	8000fd8 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff fb6a 	bl	8000fd8 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e087      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	019b      	lsls	r3, r3, #6
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	3b01      	subs	r3, #1
 8001938:	041b      	lsls	r3, r3, #16
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	491b      	ldr	r1, [pc, #108]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_RCC_OscConfig+0x478>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff fb43 	bl	8000fd8 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff fb3f 	bl	8000fd8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e05c      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x416>
 8001974:	e054      	b.n	8001a20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_RCC_OscConfig+0x478>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fb2c 	bl	8000fd8 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff fb28 	bl	8000fd8 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e045      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x444>
 80019a2:	e03d      	b.n	8001a20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e038      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40007000 	.word	0x40007000
 80019b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x4ec>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d028      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d121      	bne.n	8001a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d11a      	bne.n	8001a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019ec:	4013      	ands	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d111      	bne.n	8001a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	3b01      	subs	r3, #1
 8001a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0cc      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b68      	ldr	r3, [pc, #416]	; (8001be8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d90c      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b65      	ldr	r3, [pc, #404]	; (8001be8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b63      	ldr	r3, [pc, #396]	; (8001be8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0b8      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a84:	4b59      	ldr	r3, [pc, #356]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4a58      	ldr	r2, [pc, #352]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4a52      	ldr	r2, [pc, #328]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	494d      	ldr	r1, [pc, #308]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d044      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	4b47      	ldr	r3, [pc, #284]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d119      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e07f      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d003      	beq.n	8001aee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d107      	bne.n	8001afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aee:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e06f      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afe:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e067      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f023 0203 	bic.w	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	4934      	ldr	r1, [pc, #208]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b20:	f7ff fa5a 	bl	8000fd8 <HAL_GetTick>
 8001b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b28:	f7ff fa56 	bl	8000fd8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e04f      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 020c 	and.w	r2, r3, #12
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d1eb      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b50:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d20c      	bcs.n	8001b78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e032      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4916      	ldr	r1, [pc, #88]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	490e      	ldr	r1, [pc, #56]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bb6:	f000 f821 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	490a      	ldr	r1, [pc, #40]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	5ccb      	ldrb	r3, [r1, r3]
 8001bca:	fa22 f303 	lsr.w	r3, r2, r3
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f9ba 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	08004044 	.word	0x08004044
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	20000008 	.word	0x20000008

08001bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c00:	b094      	sub	sp, #80	; 0x50
 8001c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	647b      	str	r3, [r7, #68]	; 0x44
 8001c08:	2300      	movs	r3, #0
 8001c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c14:	4b79      	ldr	r3, [pc, #484]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d00d      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x40>
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	f200 80e1 	bhi.w	8001de8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x34>
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d003      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c2e:	e0db      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c30:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c34:	e0db      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c36:	4b73      	ldr	r3, [pc, #460]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c3a:	e0d8      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c3c:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c46:	4b6d      	ldr	r3, [pc, #436]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d063      	beq.n	8001d1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c52:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	099b      	lsrs	r3, r3, #6
 8001c58:	2200      	movs	r2, #0
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
 8001c6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c6e:	4622      	mov	r2, r4
 8001c70:	462b      	mov	r3, r5
 8001c72:	f04f 0000 	mov.w	r0, #0
 8001c76:	f04f 0100 	mov.w	r1, #0
 8001c7a:	0159      	lsls	r1, r3, #5
 8001c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c80:	0150      	lsls	r0, r2, #5
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4621      	mov	r1, r4
 8001c88:	1a51      	subs	r1, r2, r1
 8001c8a:	6139      	str	r1, [r7, #16]
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ca0:	4659      	mov	r1, fp
 8001ca2:	018b      	lsls	r3, r1, #6
 8001ca4:	4651      	mov	r1, sl
 8001ca6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001caa:	4651      	mov	r1, sl
 8001cac:	018a      	lsls	r2, r1, #6
 8001cae:	4651      	mov	r1, sl
 8001cb0:	ebb2 0801 	subs.w	r8, r2, r1
 8001cb4:	4659      	mov	r1, fp
 8001cb6:	eb63 0901 	sbc.w	r9, r3, r1
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cce:	4690      	mov	r8, r2
 8001cd0:	4699      	mov	r9, r3
 8001cd2:	4623      	mov	r3, r4
 8001cd4:	eb18 0303 	adds.w	r3, r8, r3
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	eb49 0303 	adc.w	r3, r9, r3
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cee:	4629      	mov	r1, r5
 8001cf0:	024b      	lsls	r3, r1, #9
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	024a      	lsls	r2, r1, #9
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d02:	2200      	movs	r2, #0
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d0c:	f7fe fad0 	bl	80002b0 <__aeabi_uldivmod>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4613      	mov	r3, r2
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d18:	e058      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d1a:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	099b      	lsrs	r3, r3, #6
 8001d20:	2200      	movs	r2, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	4611      	mov	r1, r2
 8001d26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d2a:	623b      	str	r3, [r7, #32]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d34:	4642      	mov	r2, r8
 8001d36:	464b      	mov	r3, r9
 8001d38:	f04f 0000 	mov.w	r0, #0
 8001d3c:	f04f 0100 	mov.w	r1, #0
 8001d40:	0159      	lsls	r1, r3, #5
 8001d42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d46:	0150      	lsls	r0, r2, #5
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4641      	mov	r1, r8
 8001d4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d52:	4649      	mov	r1, r9
 8001d54:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d6c:	ebb2 040a 	subs.w	r4, r2, sl
 8001d70:	eb63 050b 	sbc.w	r5, r3, fp
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	00eb      	lsls	r3, r5, #3
 8001d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d82:	00e2      	lsls	r2, r4, #3
 8001d84:	4614      	mov	r4, r2
 8001d86:	461d      	mov	r5, r3
 8001d88:	4643      	mov	r3, r8
 8001d8a:	18e3      	adds	r3, r4, r3
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	464b      	mov	r3, r9
 8001d90:	eb45 0303 	adc.w	r3, r5, r3
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001da2:	4629      	mov	r1, r5
 8001da4:	028b      	lsls	r3, r1, #10
 8001da6:	4621      	mov	r1, r4
 8001da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dac:	4621      	mov	r1, r4
 8001dae:	028a      	lsls	r2, r1, #10
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db6:	2200      	movs	r2, #0
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	61fa      	str	r2, [r7, #28]
 8001dbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dc0:	f7fe fa76 	bl	80002b0 <__aeabi_uldivmod>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ddc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001de6:	e002      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3750      	adds	r7, #80	; 0x50
 8001df4:	46bd      	mov	sp, r7
 8001df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	00f42400 	.word	0x00f42400
 8001e04:	007a1200 	.word	0x007a1200

08001e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e24:	f7ff fff0 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0a9b      	lsrs	r3, r3, #10
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4903      	ldr	r1, [pc, #12]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	08004054 	.word	0x08004054

08001e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e4c:	f7ff ffdc 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0b5b      	lsrs	r3, r3, #13
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4903      	ldr	r1, [pc, #12]	; (8001e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	08004054 	.word	0x08004054

08001e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e041      	b.n	8001f06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7fe fee2 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f000 fac0 	bl	8002434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e041      	b.n	8001fa4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d106      	bne.n	8001f3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f839 	bl	8001fac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	f000 fa71 	bl	8002434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_TIM_PWM_Start+0x24>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	bf14      	ite	ne
 8001fdc:	2301      	movne	r3, #1
 8001fde:	2300      	moveq	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	e022      	b.n	800202a <HAL_TIM_PWM_Start+0x6a>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d109      	bne.n	8001ffe <HAL_TIM_PWM_Start+0x3e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	e015      	b.n	800202a <HAL_TIM_PWM_Start+0x6a>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b08      	cmp	r3, #8
 8002002:	d109      	bne.n	8002018 <HAL_TIM_PWM_Start+0x58>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e008      	b.n	800202a <HAL_TIM_PWM_Start+0x6a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	bf14      	ite	ne
 8002024:	2301      	movne	r3, #1
 8002026:	2300      	moveq	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e068      	b.n	8002104 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d104      	bne.n	8002042 <HAL_TIM_PWM_Start+0x82>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002040:	e013      	b.n	800206a <HAL_TIM_PWM_Start+0xaa>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d104      	bne.n	8002052 <HAL_TIM_PWM_Start+0x92>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002050:	e00b      	b.n	800206a <HAL_TIM_PWM_Start+0xaa>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b08      	cmp	r3, #8
 8002056:	d104      	bne.n	8002062 <HAL_TIM_PWM_Start+0xa2>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002060:	e003      	b.n	800206a <HAL_TIM_PWM_Start+0xaa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2202      	movs	r2, #2
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fc84 	bl	8002980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a23      	ldr	r2, [pc, #140]	; (800210c <HAL_TIM_PWM_Start+0x14c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d107      	bne.n	8002092 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_TIM_PWM_Start+0x14c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d018      	beq.n	80020ce <HAL_TIM_PWM_Start+0x10e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d013      	beq.n	80020ce <HAL_TIM_PWM_Start+0x10e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_TIM_PWM_Start+0x150>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00e      	beq.n	80020ce <HAL_TIM_PWM_Start+0x10e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_TIM_PWM_Start+0x154>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_TIM_PWM_Start+0x10e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_TIM_PWM_Start+0x158>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d004      	beq.n	80020ce <HAL_TIM_PWM_Start+0x10e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <HAL_TIM_PWM_Start+0x15c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d111      	bne.n	80020f2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b06      	cmp	r3, #6
 80020de:	d010      	beq.n	8002102 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f0:	e007      	b.n	8002102 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40010000 	.word	0x40010000
 8002110:	40000400 	.word	0x40000400
 8002114:	40000800 	.word	0x40000800
 8002118:	40000c00 	.word	0x40000c00
 800211c:	40014000 	.word	0x40014000

08002120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800213a:	2302      	movs	r3, #2
 800213c:	e0ae      	b.n	800229c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0c      	cmp	r3, #12
 800214a:	f200 809f 	bhi.w	800228c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800214e:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002189 	.word	0x08002189
 8002158:	0800228d 	.word	0x0800228d
 800215c:	0800228d 	.word	0x0800228d
 8002160:	0800228d 	.word	0x0800228d
 8002164:	080021c9 	.word	0x080021c9
 8002168:	0800228d 	.word	0x0800228d
 800216c:	0800228d 	.word	0x0800228d
 8002170:	0800228d 	.word	0x0800228d
 8002174:	0800220b 	.word	0x0800220b
 8002178:	0800228d 	.word	0x0800228d
 800217c:	0800228d 	.word	0x0800228d
 8002180:	0800228d 	.word	0x0800228d
 8002184:	0800224b 	.word	0x0800224b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f9d0 	bl	8002534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0208 	orr.w	r2, r2, #8
 80021a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0204 	bic.w	r2, r2, #4
 80021b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6999      	ldr	r1, [r3, #24]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	619a      	str	r2, [r3, #24]
      break;
 80021c6:	e064      	b.n	8002292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fa16 	bl	8002600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6999      	ldr	r1, [r3, #24]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	021a      	lsls	r2, r3, #8
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	619a      	str	r2, [r3, #24]
      break;
 8002208:	e043      	b.n	8002292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fa61 	bl	80026d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69da      	ldr	r2, [r3, #28]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0208 	orr.w	r2, r2, #8
 8002224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0204 	bic.w	r2, r2, #4
 8002234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69d9      	ldr	r1, [r3, #28]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	61da      	str	r2, [r3, #28]
      break;
 8002248:	e023      	b.n	8002292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	4618      	mov	r0, r3
 8002252:	f000 faab 	bl	80027ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69da      	ldr	r2, [r3, #28]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69d9      	ldr	r1, [r3, #28]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	021a      	lsls	r2, r3, #8
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	61da      	str	r2, [r3, #28]
      break;
 800228a:	e002      	b.n	8002292 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	75fb      	strb	r3, [r7, #23]
      break;
 8002290:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800229a:	7dfb      	ldrb	r3, [r7, #23]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_TIM_ConfigClockSource+0x1c>
 80022bc:	2302      	movs	r3, #2
 80022be:	e0b4      	b.n	800242a <HAL_TIM_ConfigClockSource+0x186>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f8:	d03e      	beq.n	8002378 <HAL_TIM_ConfigClockSource+0xd4>
 80022fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fe:	f200 8087 	bhi.w	8002410 <HAL_TIM_ConfigClockSource+0x16c>
 8002302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002306:	f000 8086 	beq.w	8002416 <HAL_TIM_ConfigClockSource+0x172>
 800230a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230e:	d87f      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x16c>
 8002310:	2b70      	cmp	r3, #112	; 0x70
 8002312:	d01a      	beq.n	800234a <HAL_TIM_ConfigClockSource+0xa6>
 8002314:	2b70      	cmp	r3, #112	; 0x70
 8002316:	d87b      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x16c>
 8002318:	2b60      	cmp	r3, #96	; 0x60
 800231a:	d050      	beq.n	80023be <HAL_TIM_ConfigClockSource+0x11a>
 800231c:	2b60      	cmp	r3, #96	; 0x60
 800231e:	d877      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x16c>
 8002320:	2b50      	cmp	r3, #80	; 0x50
 8002322:	d03c      	beq.n	800239e <HAL_TIM_ConfigClockSource+0xfa>
 8002324:	2b50      	cmp	r3, #80	; 0x50
 8002326:	d873      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x16c>
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d058      	beq.n	80023de <HAL_TIM_ConfigClockSource+0x13a>
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d86f      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x16c>
 8002330:	2b30      	cmp	r3, #48	; 0x30
 8002332:	d064      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x15a>
 8002334:	2b30      	cmp	r3, #48	; 0x30
 8002336:	d86b      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x16c>
 8002338:	2b20      	cmp	r3, #32
 800233a:	d060      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x15a>
 800233c:	2b20      	cmp	r3, #32
 800233e:	d867      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x16c>
 8002340:	2b00      	cmp	r3, #0
 8002342:	d05c      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x15a>
 8002344:	2b10      	cmp	r3, #16
 8002346:	d05a      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x15a>
 8002348:	e062      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6899      	ldr	r1, [r3, #8]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f000 faf1 	bl	8002940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800236c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	609a      	str	r2, [r3, #8]
      break;
 8002376:	e04f      	b.n	8002418 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6899      	ldr	r1, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f000 fada 	bl	8002940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800239a:	609a      	str	r2, [r3, #8]
      break;
 800239c:	e03c      	b.n	8002418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f000 fa4e 	bl	800284c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2150      	movs	r1, #80	; 0x50
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 faa7 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 80023bc:	e02c      	b.n	8002418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f000 fa6d 	bl	80028aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2160      	movs	r1, #96	; 0x60
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fa97 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 80023dc:	e01c      	b.n	8002418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f000 fa2e 	bl	800284c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2140      	movs	r1, #64	; 0x40
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fa87 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 80023fc:	e00c      	b.n	8002418 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f000 fa7e 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 800240e:	e003      	b.n	8002418 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e000      	b.n	8002418 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a34      	ldr	r2, [pc, #208]	; (8002518 <TIM_Base_SetConfig+0xe4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00f      	beq.n	800246c <TIM_Base_SetConfig+0x38>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002452:	d00b      	beq.n	800246c <TIM_Base_SetConfig+0x38>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a31      	ldr	r2, [pc, #196]	; (800251c <TIM_Base_SetConfig+0xe8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d007      	beq.n	800246c <TIM_Base_SetConfig+0x38>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a30      	ldr	r2, [pc, #192]	; (8002520 <TIM_Base_SetConfig+0xec>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d003      	beq.n	800246c <TIM_Base_SetConfig+0x38>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a2f      	ldr	r2, [pc, #188]	; (8002524 <TIM_Base_SetConfig+0xf0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d108      	bne.n	800247e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a25      	ldr	r2, [pc, #148]	; (8002518 <TIM_Base_SetConfig+0xe4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01b      	beq.n	80024be <TIM_Base_SetConfig+0x8a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248c:	d017      	beq.n	80024be <TIM_Base_SetConfig+0x8a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a22      	ldr	r2, [pc, #136]	; (800251c <TIM_Base_SetConfig+0xe8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <TIM_Base_SetConfig+0x8a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a21      	ldr	r2, [pc, #132]	; (8002520 <TIM_Base_SetConfig+0xec>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00f      	beq.n	80024be <TIM_Base_SetConfig+0x8a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a20      	ldr	r2, [pc, #128]	; (8002524 <TIM_Base_SetConfig+0xf0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00b      	beq.n	80024be <TIM_Base_SetConfig+0x8a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <TIM_Base_SetConfig+0xf4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d007      	beq.n	80024be <TIM_Base_SetConfig+0x8a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a1e      	ldr	r2, [pc, #120]	; (800252c <TIM_Base_SetConfig+0xf8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d003      	beq.n	80024be <TIM_Base_SetConfig+0x8a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <TIM_Base_SetConfig+0xfc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d108      	bne.n	80024d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <TIM_Base_SetConfig+0xe4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d103      	bne.n	8002504 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	615a      	str	r2, [r3, #20]
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40010000 	.word	0x40010000
 800251c:	40000400 	.word	0x40000400
 8002520:	40000800 	.word	0x40000800
 8002524:	40000c00 	.word	0x40000c00
 8002528:	40014000 	.word	0x40014000
 800252c:	40014400 	.word	0x40014400
 8002530:	40014800 	.word	0x40014800

08002534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	f023 0201 	bic.w	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0303 	bic.w	r3, r3, #3
 800256a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f023 0302 	bic.w	r3, r3, #2
 800257c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <TIM_OC1_SetConfig+0xc8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d10c      	bne.n	80025aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f023 0308 	bic.w	r3, r3, #8
 8002596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a13      	ldr	r2, [pc, #76]	; (80025fc <TIM_OC1_SetConfig+0xc8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d111      	bne.n	80025d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	621a      	str	r2, [r3, #32]
}
 80025f0:	bf00      	nop
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40010000 	.word	0x40010000

08002600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	f023 0210 	bic.w	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800262e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 0320 	bic.w	r3, r3, #32
 800264a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <TIM_OC2_SetConfig+0xd4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d10d      	bne.n	800267c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800267a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a15      	ldr	r2, [pc, #84]	; (80026d4 <TIM_OC2_SetConfig+0xd4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d113      	bne.n	80026ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800268a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	621a      	str	r2, [r3, #32]
}
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010000 	.word	0x40010000

080026d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <TIM_OC3_SetConfig+0xd0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10d      	bne.n	8002752 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800273c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <TIM_OC3_SetConfig+0xd0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d113      	bne.n	8002782 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	621a      	str	r2, [r3, #32]
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40010000 	.word	0x40010000

080027ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	031b      	lsls	r3, r3, #12
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a10      	ldr	r2, [pc, #64]	; (8002848 <TIM_OC4_SetConfig+0x9c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d109      	bne.n	8002820 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	019b      	lsls	r3, r3, #6
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	621a      	str	r2, [r3, #32]
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40010000 	.word	0x40010000

0800284c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 030a 	bic.w	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b087      	sub	sp, #28
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f023 0210 	bic.w	r2, r3, #16
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	031b      	lsls	r3, r3, #12
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	621a      	str	r2, [r3, #32]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800290a:	b480      	push	{r7}
 800290c:	b085      	sub	sp, #20
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	f043 0307 	orr.w	r3, r3, #7
 800292c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800295a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	021a      	lsls	r2, r3, #8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	431a      	orrs	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4313      	orrs	r3, r2
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	609a      	str	r2, [r3, #8]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2201      	movs	r2, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1a      	ldr	r2, [r3, #32]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	621a      	str	r2, [r3, #32]
}
 80029be:	bf00      	nop
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e050      	b.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d018      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a30:	d013      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00e      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d009      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10c      	bne.n	8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	40000c00 	.word	0x40000c00
 8002aa4:	40014000 	.word	0x40014000

08002aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e03f      	b.n	8002b3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe f938 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2224      	movs	r2, #36	; 0x24
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f9cb 	bl	8002e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b08a      	sub	sp, #40	; 0x28
 8002b46:	af02      	add	r7, sp, #8
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d17c      	bne.n	8002c5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <HAL_UART_Transmit+0x2c>
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e075      	b.n	8002c5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_UART_Transmit+0x3e>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e06e      	b.n	8002c5e <HAL_UART_Transmit+0x11c>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2221      	movs	r2, #33	; 0x21
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b96:	f7fe fa1f 	bl	8000fd8 <HAL_GetTick>
 8002b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	88fa      	ldrh	r2, [r7, #6]
 8002ba0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb0:	d108      	bne.n	8002bc4 <HAL_UART_Transmit+0x82>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	e003      	b.n	8002bcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bd4:	e02a      	b.n	8002c2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2180      	movs	r1, #128	; 0x80
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f8e2 	bl	8002daa <UART_WaitOnFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e036      	b.n	8002c5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10b      	bne.n	8002c0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	3302      	adds	r3, #2
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	e007      	b.n	8002c1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1cf      	bne.n	8002bd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2140      	movs	r1, #64	; 0x40
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f8b2 	bl	8002daa <UART_WaitOnFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e006      	b.n	8002c5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e000      	b.n	8002c5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
  }
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b08a      	sub	sp, #40	; 0x28
 8002c6a:	af02      	add	r7, sp, #8
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4613      	mov	r3, r2
 8002c74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	f040 808c 	bne.w	8002da0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_UART_Receive+0x2e>
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e084      	b.n	8002da2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_UART_Receive+0x40>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e07d      	b.n	8002da2 <HAL_UART_Receive+0x13c>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2222      	movs	r2, #34	; 0x22
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cc2:	f7fe f989 	bl	8000fd8 <HAL_GetTick>
 8002cc6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	88fa      	ldrh	r2, [r7, #6]
 8002cd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cdc:	d108      	bne.n	8002cf0 <HAL_UART_Receive+0x8a>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d104      	bne.n	8002cf0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e003      	b.n	8002cf8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002d00:	e043      	b.n	8002d8a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2120      	movs	r1, #32
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f84c 	bl	8002daa <UART_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e042      	b.n	8002da2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	3302      	adds	r3, #2
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	e01f      	b.n	8002d7c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d44:	d007      	beq.n	8002d56 <HAL_UART_Receive+0xf0>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <HAL_UART_Receive+0xfe>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e008      	b.n	8002d76 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1b6      	bne.n	8002d02 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e000      	b.n	8002da2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002da0:	2302      	movs	r3, #2
  }
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b090      	sub	sp, #64	; 0x40
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	4613      	mov	r3, r2
 8002db8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dba:	e050      	b.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc2:	d04c      	beq.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <UART_WaitOnFlagUntilTimeout+0x30>
 8002dca:	f7fe f905 	bl	8000fd8 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d241      	bcs.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	330c      	adds	r3, #12
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	330c      	adds	r3, #12
 8002df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dfa:	637a      	str	r2, [r7, #52]	; 0x34
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e5      	bne.n	8002dda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3314      	adds	r3, #20
 8002e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3314      	adds	r3, #20
 8002e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e2e:	623a      	str	r2, [r7, #32]
 8002e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e32:	69f9      	ldr	r1, [r7, #28]
 8002e34:	6a3a      	ldr	r2, [r7, #32]
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1e5      	bne.n	8002e0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e00f      	b.n	8002e7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4013      	ands	r3, r2
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	bf0c      	ite	eq
 8002e6e:	2301      	moveq	r3, #1
 8002e70:	2300      	movne	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d09f      	beq.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3740      	adds	r7, #64	; 0x40
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e8c:	b0c0      	sub	sp, #256	; 0x100
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	68d9      	ldr	r1, [r3, #12]
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	ea40 0301 	orr.w	r3, r0, r1
 8002eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ee0:	f021 010c 	bic.w	r1, r1, #12
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f02:	6999      	ldr	r1, [r3, #24]
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	ea40 0301 	orr.w	r3, r0, r1
 8002f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4b8f      	ldr	r3, [pc, #572]	; (8003154 <UART_SetConfig+0x2cc>)
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d005      	beq.n	8002f28 <UART_SetConfig+0xa0>
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b8d      	ldr	r3, [pc, #564]	; (8003158 <UART_SetConfig+0x2d0>)
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d104      	bne.n	8002f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f28:	f7fe ff8e 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8002f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f30:	e003      	b.n	8002f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f32:	f7fe ff75 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8002f36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f44:	f040 810c 	bne.w	8003160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	462b      	mov	r3, r5
 8002f5e:	1891      	adds	r1, r2, r2
 8002f60:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f62:	415b      	adcs	r3, r3
 8002f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	eb12 0801 	adds.w	r8, r2, r1
 8002f70:	4629      	mov	r1, r5
 8002f72:	eb43 0901 	adc.w	r9, r3, r1
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f8a:	4690      	mov	r8, r2
 8002f8c:	4699      	mov	r9, r3
 8002f8e:	4623      	mov	r3, r4
 8002f90:	eb18 0303 	adds.w	r3, r8, r3
 8002f94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f98:	462b      	mov	r3, r5
 8002f9a:	eb49 0303 	adc.w	r3, r9, r3
 8002f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	18db      	adds	r3, r3, r3
 8002fba:	653b      	str	r3, [r7, #80]	; 0x50
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	eb42 0303 	adc.w	r3, r2, r3
 8002fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fcc:	f7fd f970 	bl	80002b0 <__aeabi_uldivmod>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4b61      	ldr	r3, [pc, #388]	; (800315c <UART_SetConfig+0x2d4>)
 8002fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	011c      	lsls	r4, r3, #4
 8002fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	1891      	adds	r1, r2, r2
 8002ff6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ff8:	415b      	adcs	r3, r3
 8002ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003000:	4641      	mov	r1, r8
 8003002:	eb12 0a01 	adds.w	sl, r2, r1
 8003006:	4649      	mov	r1, r9
 8003008:	eb43 0b01 	adc.w	fp, r3, r1
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800301c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003020:	4692      	mov	sl, r2
 8003022:	469b      	mov	fp, r3
 8003024:	4643      	mov	r3, r8
 8003026:	eb1a 0303 	adds.w	r3, sl, r3
 800302a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800302e:	464b      	mov	r3, r9
 8003030:	eb4b 0303 	adc.w	r3, fp, r3
 8003034:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003044:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800304c:	460b      	mov	r3, r1
 800304e:	18db      	adds	r3, r3, r3
 8003050:	643b      	str	r3, [r7, #64]	; 0x40
 8003052:	4613      	mov	r3, r2
 8003054:	eb42 0303 	adc.w	r3, r2, r3
 8003058:	647b      	str	r3, [r7, #68]	; 0x44
 800305a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800305e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003062:	f7fd f925 	bl	80002b0 <__aeabi_uldivmod>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4611      	mov	r1, r2
 800306c:	4b3b      	ldr	r3, [pc, #236]	; (800315c <UART_SetConfig+0x2d4>)
 800306e:	fba3 2301 	umull	r2, r3, r3, r1
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2264      	movs	r2, #100	; 0x64
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	1acb      	subs	r3, r1, r3
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003082:	4b36      	ldr	r3, [pc, #216]	; (800315c <UART_SetConfig+0x2d4>)
 8003084:	fba3 2302 	umull	r2, r3, r3, r2
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003090:	441c      	add	r4, r3
 8003092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003096:	2200      	movs	r2, #0
 8003098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800309c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030a4:	4642      	mov	r2, r8
 80030a6:	464b      	mov	r3, r9
 80030a8:	1891      	adds	r1, r2, r2
 80030aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80030ac:	415b      	adcs	r3, r3
 80030ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030b4:	4641      	mov	r1, r8
 80030b6:	1851      	adds	r1, r2, r1
 80030b8:	6339      	str	r1, [r7, #48]	; 0x30
 80030ba:	4649      	mov	r1, r9
 80030bc:	414b      	adcs	r3, r1
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030cc:	4659      	mov	r1, fp
 80030ce:	00cb      	lsls	r3, r1, #3
 80030d0:	4651      	mov	r1, sl
 80030d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030d6:	4651      	mov	r1, sl
 80030d8:	00ca      	lsls	r2, r1, #3
 80030da:	4610      	mov	r0, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	4603      	mov	r3, r0
 80030e0:	4642      	mov	r2, r8
 80030e2:	189b      	adds	r3, r3, r2
 80030e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030e8:	464b      	mov	r3, r9
 80030ea:	460a      	mov	r2, r1
 80030ec:	eb42 0303 	adc.w	r3, r2, r3
 80030f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003100:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003108:	460b      	mov	r3, r1
 800310a:	18db      	adds	r3, r3, r3
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
 800310e:	4613      	mov	r3, r2
 8003110:	eb42 0303 	adc.w	r3, r2, r3
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800311a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800311e:	f7fd f8c7 	bl	80002b0 <__aeabi_uldivmod>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <UART_SetConfig+0x2d4>)
 8003128:	fba3 1302 	umull	r1, r3, r3, r2
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	2164      	movs	r1, #100	; 0x64
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	3332      	adds	r3, #50	; 0x32
 800313a:	4a08      	ldr	r2, [pc, #32]	; (800315c <UART_SetConfig+0x2d4>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	f003 0207 	and.w	r2, r3, #7
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4422      	add	r2, r4
 800314e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003150:	e105      	b.n	800335e <UART_SetConfig+0x4d6>
 8003152:	bf00      	nop
 8003154:	40011000 	.word	0x40011000
 8003158:	40011400 	.word	0x40011400
 800315c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003164:	2200      	movs	r2, #0
 8003166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800316a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800316e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003172:	4642      	mov	r2, r8
 8003174:	464b      	mov	r3, r9
 8003176:	1891      	adds	r1, r2, r2
 8003178:	6239      	str	r1, [r7, #32]
 800317a:	415b      	adcs	r3, r3
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
 800317e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003182:	4641      	mov	r1, r8
 8003184:	1854      	adds	r4, r2, r1
 8003186:	4649      	mov	r1, r9
 8003188:	eb43 0501 	adc.w	r5, r3, r1
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	00eb      	lsls	r3, r5, #3
 8003196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800319a:	00e2      	lsls	r2, r4, #3
 800319c:	4614      	mov	r4, r2
 800319e:	461d      	mov	r5, r3
 80031a0:	4643      	mov	r3, r8
 80031a2:	18e3      	adds	r3, r4, r3
 80031a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031a8:	464b      	mov	r3, r9
 80031aa:	eb45 0303 	adc.w	r3, r5, r3
 80031ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031ce:	4629      	mov	r1, r5
 80031d0:	008b      	lsls	r3, r1, #2
 80031d2:	4621      	mov	r1, r4
 80031d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d8:	4621      	mov	r1, r4
 80031da:	008a      	lsls	r2, r1, #2
 80031dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031e0:	f7fd f866 	bl	80002b0 <__aeabi_uldivmod>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4b60      	ldr	r3, [pc, #384]	; (800336c <UART_SetConfig+0x4e4>)
 80031ea:	fba3 2302 	umull	r2, r3, r3, r2
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	011c      	lsls	r4, r3, #4
 80031f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003204:	4642      	mov	r2, r8
 8003206:	464b      	mov	r3, r9
 8003208:	1891      	adds	r1, r2, r2
 800320a:	61b9      	str	r1, [r7, #24]
 800320c:	415b      	adcs	r3, r3
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003214:	4641      	mov	r1, r8
 8003216:	1851      	adds	r1, r2, r1
 8003218:	6139      	str	r1, [r7, #16]
 800321a:	4649      	mov	r1, r9
 800321c:	414b      	adcs	r3, r1
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800322c:	4659      	mov	r1, fp
 800322e:	00cb      	lsls	r3, r1, #3
 8003230:	4651      	mov	r1, sl
 8003232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003236:	4651      	mov	r1, sl
 8003238:	00ca      	lsls	r2, r1, #3
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	4603      	mov	r3, r0
 8003240:	4642      	mov	r2, r8
 8003242:	189b      	adds	r3, r3, r2
 8003244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003248:	464b      	mov	r3, r9
 800324a:	460a      	mov	r2, r1
 800324c:	eb42 0303 	adc.w	r3, r2, r3
 8003250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	67bb      	str	r3, [r7, #120]	; 0x78
 800325e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800326c:	4649      	mov	r1, r9
 800326e:	008b      	lsls	r3, r1, #2
 8003270:	4641      	mov	r1, r8
 8003272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003276:	4641      	mov	r1, r8
 8003278:	008a      	lsls	r2, r1, #2
 800327a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800327e:	f7fd f817 	bl	80002b0 <__aeabi_uldivmod>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4b39      	ldr	r3, [pc, #228]	; (800336c <UART_SetConfig+0x4e4>)
 8003288:	fba3 1302 	umull	r1, r3, r3, r2
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	2164      	movs	r1, #100	; 0x64
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	3332      	adds	r3, #50	; 0x32
 800329a:	4a34      	ldr	r2, [pc, #208]	; (800336c <UART_SetConfig+0x4e4>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a6:	441c      	add	r4, r3
 80032a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ac:	2200      	movs	r2, #0
 80032ae:	673b      	str	r3, [r7, #112]	; 0x70
 80032b0:	677a      	str	r2, [r7, #116]	; 0x74
 80032b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032b6:	4642      	mov	r2, r8
 80032b8:	464b      	mov	r3, r9
 80032ba:	1891      	adds	r1, r2, r2
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	415b      	adcs	r3, r3
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032c6:	4641      	mov	r1, r8
 80032c8:	1851      	adds	r1, r2, r1
 80032ca:	6039      	str	r1, [r7, #0]
 80032cc:	4649      	mov	r1, r9
 80032ce:	414b      	adcs	r3, r1
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032de:	4659      	mov	r1, fp
 80032e0:	00cb      	lsls	r3, r1, #3
 80032e2:	4651      	mov	r1, sl
 80032e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e8:	4651      	mov	r1, sl
 80032ea:	00ca      	lsls	r2, r1, #3
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	4603      	mov	r3, r0
 80032f2:	4642      	mov	r2, r8
 80032f4:	189b      	adds	r3, r3, r2
 80032f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80032f8:	464b      	mov	r3, r9
 80032fa:	460a      	mov	r2, r1
 80032fc:	eb42 0303 	adc.w	r3, r2, r3
 8003300:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	663b      	str	r3, [r7, #96]	; 0x60
 800330c:	667a      	str	r2, [r7, #100]	; 0x64
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800331a:	4649      	mov	r1, r9
 800331c:	008b      	lsls	r3, r1, #2
 800331e:	4641      	mov	r1, r8
 8003320:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003324:	4641      	mov	r1, r8
 8003326:	008a      	lsls	r2, r1, #2
 8003328:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800332c:	f7fc ffc0 	bl	80002b0 <__aeabi_uldivmod>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4b0d      	ldr	r3, [pc, #52]	; (800336c <UART_SetConfig+0x4e4>)
 8003336:	fba3 1302 	umull	r1, r3, r3, r2
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2164      	movs	r1, #100	; 0x64
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	3332      	adds	r3, #50	; 0x32
 8003348:	4a08      	ldr	r2, [pc, #32]	; (800336c <UART_SetConfig+0x4e4>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	f003 020f 	and.w	r2, r3, #15
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4422      	add	r2, r4
 800335c:	609a      	str	r2, [r3, #8]
}
 800335e:	bf00      	nop
 8003360:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336a:	bf00      	nop
 800336c:	51eb851f 	.word	0x51eb851f

08003370 <__errno>:
 8003370:	4b01      	ldr	r3, [pc, #4]	; (8003378 <__errno+0x8>)
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000010 	.word	0x20000010

0800337c <__libc_init_array>:
 800337c:	b570      	push	{r4, r5, r6, lr}
 800337e:	4d0d      	ldr	r5, [pc, #52]	; (80033b4 <__libc_init_array+0x38>)
 8003380:	4c0d      	ldr	r4, [pc, #52]	; (80033b8 <__libc_init_array+0x3c>)
 8003382:	1b64      	subs	r4, r4, r5
 8003384:	10a4      	asrs	r4, r4, #2
 8003386:	2600      	movs	r6, #0
 8003388:	42a6      	cmp	r6, r4
 800338a:	d109      	bne.n	80033a0 <__libc_init_array+0x24>
 800338c:	4d0b      	ldr	r5, [pc, #44]	; (80033bc <__libc_init_array+0x40>)
 800338e:	4c0c      	ldr	r4, [pc, #48]	; (80033c0 <__libc_init_array+0x44>)
 8003390:	f000 fe20 	bl	8003fd4 <_init>
 8003394:	1b64      	subs	r4, r4, r5
 8003396:	10a4      	asrs	r4, r4, #2
 8003398:	2600      	movs	r6, #0
 800339a:	42a6      	cmp	r6, r4
 800339c:	d105      	bne.n	80033aa <__libc_init_array+0x2e>
 800339e:	bd70      	pop	{r4, r5, r6, pc}
 80033a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a4:	4798      	blx	r3
 80033a6:	3601      	adds	r6, #1
 80033a8:	e7ee      	b.n	8003388 <__libc_init_array+0xc>
 80033aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ae:	4798      	blx	r3
 80033b0:	3601      	adds	r6, #1
 80033b2:	e7f2      	b.n	800339a <__libc_init_array+0x1e>
 80033b4:	080041e4 	.word	0x080041e4
 80033b8:	080041e4 	.word	0x080041e4
 80033bc:	080041e4 	.word	0x080041e4
 80033c0:	080041e8 	.word	0x080041e8

080033c4 <memset>:
 80033c4:	4402      	add	r2, r0
 80033c6:	4603      	mov	r3, r0
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d100      	bne.n	80033ce <memset+0xa>
 80033cc:	4770      	bx	lr
 80033ce:	f803 1b01 	strb.w	r1, [r3], #1
 80033d2:	e7f9      	b.n	80033c8 <memset+0x4>

080033d4 <siscanf>:
 80033d4:	b40e      	push	{r1, r2, r3}
 80033d6:	b510      	push	{r4, lr}
 80033d8:	b09f      	sub	sp, #124	; 0x7c
 80033da:	ac21      	add	r4, sp, #132	; 0x84
 80033dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80033e0:	f854 2b04 	ldr.w	r2, [r4], #4
 80033e4:	9201      	str	r2, [sp, #4]
 80033e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80033ea:	9004      	str	r0, [sp, #16]
 80033ec:	9008      	str	r0, [sp, #32]
 80033ee:	f7fc ff01 	bl	80001f4 <strlen>
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <siscanf+0x50>)
 80033f4:	9005      	str	r0, [sp, #20]
 80033f6:	9009      	str	r0, [sp, #36]	; 0x24
 80033f8:	930d      	str	r3, [sp, #52]	; 0x34
 80033fa:	480b      	ldr	r0, [pc, #44]	; (8003428 <siscanf+0x54>)
 80033fc:	9a01      	ldr	r2, [sp, #4]
 80033fe:	6800      	ldr	r0, [r0, #0]
 8003400:	9403      	str	r4, [sp, #12]
 8003402:	2300      	movs	r3, #0
 8003404:	9311      	str	r3, [sp, #68]	; 0x44
 8003406:	9316      	str	r3, [sp, #88]	; 0x58
 8003408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800340c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003410:	a904      	add	r1, sp, #16
 8003412:	4623      	mov	r3, r4
 8003414:	f000 f866 	bl	80034e4 <__ssvfiscanf_r>
 8003418:	b01f      	add	sp, #124	; 0x7c
 800341a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341e:	b003      	add	sp, #12
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	0800342d 	.word	0x0800342d
 8003428:	20000010 	.word	0x20000010

0800342c <__seofread>:
 800342c:	2000      	movs	r0, #0
 800342e:	4770      	bx	lr

08003430 <_sungetc_r>:
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	1c4b      	adds	r3, r1, #1
 8003434:	4614      	mov	r4, r2
 8003436:	d103      	bne.n	8003440 <_sungetc_r+0x10>
 8003438:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800343c:	4628      	mov	r0, r5
 800343e:	bd38      	pop	{r3, r4, r5, pc}
 8003440:	8993      	ldrh	r3, [r2, #12]
 8003442:	f023 0320 	bic.w	r3, r3, #32
 8003446:	8193      	strh	r3, [r2, #12]
 8003448:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800344a:	6852      	ldr	r2, [r2, #4]
 800344c:	b2cd      	uxtb	r5, r1
 800344e:	b18b      	cbz	r3, 8003474 <_sungetc_r+0x44>
 8003450:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003452:	4293      	cmp	r3, r2
 8003454:	dd08      	ble.n	8003468 <_sungetc_r+0x38>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	1e5a      	subs	r2, r3, #1
 800345a:	6022      	str	r2, [r4, #0]
 800345c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003460:	6863      	ldr	r3, [r4, #4]
 8003462:	3301      	adds	r3, #1
 8003464:	6063      	str	r3, [r4, #4]
 8003466:	e7e9      	b.n	800343c <_sungetc_r+0xc>
 8003468:	4621      	mov	r1, r4
 800346a:	f000 fc35 	bl	8003cd8 <__submore>
 800346e:	2800      	cmp	r0, #0
 8003470:	d0f1      	beq.n	8003456 <_sungetc_r+0x26>
 8003472:	e7e1      	b.n	8003438 <_sungetc_r+0x8>
 8003474:	6921      	ldr	r1, [r4, #16]
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	b151      	cbz	r1, 8003490 <_sungetc_r+0x60>
 800347a:	4299      	cmp	r1, r3
 800347c:	d208      	bcs.n	8003490 <_sungetc_r+0x60>
 800347e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003482:	42a9      	cmp	r1, r5
 8003484:	d104      	bne.n	8003490 <_sungetc_r+0x60>
 8003486:	3b01      	subs	r3, #1
 8003488:	3201      	adds	r2, #1
 800348a:	6023      	str	r3, [r4, #0]
 800348c:	6062      	str	r2, [r4, #4]
 800348e:	e7d5      	b.n	800343c <_sungetc_r+0xc>
 8003490:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003498:	6363      	str	r3, [r4, #52]	; 0x34
 800349a:	2303      	movs	r3, #3
 800349c:	63a3      	str	r3, [r4, #56]	; 0x38
 800349e:	4623      	mov	r3, r4
 80034a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	2301      	movs	r3, #1
 80034a8:	e7dc      	b.n	8003464 <_sungetc_r+0x34>

080034aa <__ssrefill_r>:
 80034aa:	b510      	push	{r4, lr}
 80034ac:	460c      	mov	r4, r1
 80034ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80034b0:	b169      	cbz	r1, 80034ce <__ssrefill_r+0x24>
 80034b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034b6:	4299      	cmp	r1, r3
 80034b8:	d001      	beq.n	80034be <__ssrefill_r+0x14>
 80034ba:	f000 fc57 	bl	8003d6c <_free_r>
 80034be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034c0:	6063      	str	r3, [r4, #4]
 80034c2:	2000      	movs	r0, #0
 80034c4:	6360      	str	r0, [r4, #52]	; 0x34
 80034c6:	b113      	cbz	r3, 80034ce <__ssrefill_r+0x24>
 80034c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034ca:	6023      	str	r3, [r4, #0]
 80034cc:	bd10      	pop	{r4, pc}
 80034ce:	6923      	ldr	r3, [r4, #16]
 80034d0:	6023      	str	r3, [r4, #0]
 80034d2:	2300      	movs	r3, #0
 80034d4:	6063      	str	r3, [r4, #4]
 80034d6:	89a3      	ldrh	r3, [r4, #12]
 80034d8:	f043 0320 	orr.w	r3, r3, #32
 80034dc:	81a3      	strh	r3, [r4, #12]
 80034de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034e2:	e7f3      	b.n	80034cc <__ssrefill_r+0x22>

080034e4 <__ssvfiscanf_r>:
 80034e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e8:	460c      	mov	r4, r1
 80034ea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80034ee:	2100      	movs	r1, #0
 80034f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80034f4:	49a6      	ldr	r1, [pc, #664]	; (8003790 <__ssvfiscanf_r+0x2ac>)
 80034f6:	91a0      	str	r1, [sp, #640]	; 0x280
 80034f8:	f10d 0804 	add.w	r8, sp, #4
 80034fc:	49a5      	ldr	r1, [pc, #660]	; (8003794 <__ssvfiscanf_r+0x2b0>)
 80034fe:	4fa6      	ldr	r7, [pc, #664]	; (8003798 <__ssvfiscanf_r+0x2b4>)
 8003500:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800379c <__ssvfiscanf_r+0x2b8>
 8003504:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003508:	4606      	mov	r6, r0
 800350a:	91a1      	str	r1, [sp, #644]	; 0x284
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	7813      	ldrb	r3, [r2, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 815a 	beq.w	80037ca <__ssvfiscanf_r+0x2e6>
 8003516:	5dd9      	ldrb	r1, [r3, r7]
 8003518:	f011 0108 	ands.w	r1, r1, #8
 800351c:	f102 0501 	add.w	r5, r2, #1
 8003520:	d019      	beq.n	8003556 <__ssvfiscanf_r+0x72>
 8003522:	6863      	ldr	r3, [r4, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	dd0f      	ble.n	8003548 <__ssvfiscanf_r+0x64>
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	781a      	ldrb	r2, [r3, #0]
 800352c:	5cba      	ldrb	r2, [r7, r2]
 800352e:	0712      	lsls	r2, r2, #28
 8003530:	d401      	bmi.n	8003536 <__ssvfiscanf_r+0x52>
 8003532:	462a      	mov	r2, r5
 8003534:	e7eb      	b.n	800350e <__ssvfiscanf_r+0x2a>
 8003536:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003538:	3201      	adds	r2, #1
 800353a:	9245      	str	r2, [sp, #276]	; 0x114
 800353c:	6862      	ldr	r2, [r4, #4]
 800353e:	3301      	adds	r3, #1
 8003540:	3a01      	subs	r2, #1
 8003542:	6062      	str	r2, [r4, #4]
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	e7ec      	b.n	8003522 <__ssvfiscanf_r+0x3e>
 8003548:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800354a:	4621      	mov	r1, r4
 800354c:	4630      	mov	r0, r6
 800354e:	4798      	blx	r3
 8003550:	2800      	cmp	r0, #0
 8003552:	d0e9      	beq.n	8003528 <__ssvfiscanf_r+0x44>
 8003554:	e7ed      	b.n	8003532 <__ssvfiscanf_r+0x4e>
 8003556:	2b25      	cmp	r3, #37	; 0x25
 8003558:	d012      	beq.n	8003580 <__ssvfiscanf_r+0x9c>
 800355a:	469a      	mov	sl, r3
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f340 8091 	ble.w	8003686 <__ssvfiscanf_r+0x1a2>
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	7813      	ldrb	r3, [r2, #0]
 8003568:	4553      	cmp	r3, sl
 800356a:	f040 812e 	bne.w	80037ca <__ssvfiscanf_r+0x2e6>
 800356e:	6863      	ldr	r3, [r4, #4]
 8003570:	3b01      	subs	r3, #1
 8003572:	6063      	str	r3, [r4, #4]
 8003574:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003576:	3201      	adds	r2, #1
 8003578:	3301      	adds	r3, #1
 800357a:	6022      	str	r2, [r4, #0]
 800357c:	9345      	str	r3, [sp, #276]	; 0x114
 800357e:	e7d8      	b.n	8003532 <__ssvfiscanf_r+0x4e>
 8003580:	9141      	str	r1, [sp, #260]	; 0x104
 8003582:	9143      	str	r1, [sp, #268]	; 0x10c
 8003584:	7853      	ldrb	r3, [r2, #1]
 8003586:	2b2a      	cmp	r3, #42	; 0x2a
 8003588:	bf02      	ittt	eq
 800358a:	2310      	moveq	r3, #16
 800358c:	1c95      	addeq	r5, r2, #2
 800358e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003590:	220a      	movs	r2, #10
 8003592:	46aa      	mov	sl, r5
 8003594:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003598:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800359c:	2b09      	cmp	r3, #9
 800359e:	d91d      	bls.n	80035dc <__ssvfiscanf_r+0xf8>
 80035a0:	487e      	ldr	r0, [pc, #504]	; (800379c <__ssvfiscanf_r+0x2b8>)
 80035a2:	2203      	movs	r2, #3
 80035a4:	f7fc fe34 	bl	8000210 <memchr>
 80035a8:	b140      	cbz	r0, 80035bc <__ssvfiscanf_r+0xd8>
 80035aa:	2301      	movs	r3, #1
 80035ac:	eba0 0009 	sub.w	r0, r0, r9
 80035b0:	fa03 f000 	lsl.w	r0, r3, r0
 80035b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80035b6:	4318      	orrs	r0, r3
 80035b8:	9041      	str	r0, [sp, #260]	; 0x104
 80035ba:	4655      	mov	r5, sl
 80035bc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035c0:	2b78      	cmp	r3, #120	; 0x78
 80035c2:	d806      	bhi.n	80035d2 <__ssvfiscanf_r+0xee>
 80035c4:	2b57      	cmp	r3, #87	; 0x57
 80035c6:	d810      	bhi.n	80035ea <__ssvfiscanf_r+0x106>
 80035c8:	2b25      	cmp	r3, #37	; 0x25
 80035ca:	d0c6      	beq.n	800355a <__ssvfiscanf_r+0x76>
 80035cc:	d856      	bhi.n	800367c <__ssvfiscanf_r+0x198>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d064      	beq.n	800369c <__ssvfiscanf_r+0x1b8>
 80035d2:	2303      	movs	r3, #3
 80035d4:	9347      	str	r3, [sp, #284]	; 0x11c
 80035d6:	230a      	movs	r3, #10
 80035d8:	9342      	str	r3, [sp, #264]	; 0x108
 80035da:	e071      	b.n	80036c0 <__ssvfiscanf_r+0x1dc>
 80035dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80035de:	fb02 1103 	mla	r1, r2, r3, r1
 80035e2:	3930      	subs	r1, #48	; 0x30
 80035e4:	9143      	str	r1, [sp, #268]	; 0x10c
 80035e6:	4655      	mov	r5, sl
 80035e8:	e7d3      	b.n	8003592 <__ssvfiscanf_r+0xae>
 80035ea:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80035ee:	2a20      	cmp	r2, #32
 80035f0:	d8ef      	bhi.n	80035d2 <__ssvfiscanf_r+0xee>
 80035f2:	a101      	add	r1, pc, #4	; (adr r1, 80035f8 <__ssvfiscanf_r+0x114>)
 80035f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80035f8:	080036ab 	.word	0x080036ab
 80035fc:	080035d3 	.word	0x080035d3
 8003600:	080035d3 	.word	0x080035d3
 8003604:	08003709 	.word	0x08003709
 8003608:	080035d3 	.word	0x080035d3
 800360c:	080035d3 	.word	0x080035d3
 8003610:	080035d3 	.word	0x080035d3
 8003614:	080035d3 	.word	0x080035d3
 8003618:	080035d3 	.word	0x080035d3
 800361c:	080035d3 	.word	0x080035d3
 8003620:	080035d3 	.word	0x080035d3
 8003624:	0800371f 	.word	0x0800371f
 8003628:	080036f5 	.word	0x080036f5
 800362c:	08003683 	.word	0x08003683
 8003630:	08003683 	.word	0x08003683
 8003634:	08003683 	.word	0x08003683
 8003638:	080035d3 	.word	0x080035d3
 800363c:	080036f9 	.word	0x080036f9
 8003640:	080035d3 	.word	0x080035d3
 8003644:	080035d3 	.word	0x080035d3
 8003648:	080035d3 	.word	0x080035d3
 800364c:	080035d3 	.word	0x080035d3
 8003650:	0800372f 	.word	0x0800372f
 8003654:	08003701 	.word	0x08003701
 8003658:	080036a3 	.word	0x080036a3
 800365c:	080035d3 	.word	0x080035d3
 8003660:	080035d3 	.word	0x080035d3
 8003664:	0800372b 	.word	0x0800372b
 8003668:	080035d3 	.word	0x080035d3
 800366c:	080036f5 	.word	0x080036f5
 8003670:	080035d3 	.word	0x080035d3
 8003674:	080035d3 	.word	0x080035d3
 8003678:	080036ab 	.word	0x080036ab
 800367c:	3b45      	subs	r3, #69	; 0x45
 800367e:	2b02      	cmp	r3, #2
 8003680:	d8a7      	bhi.n	80035d2 <__ssvfiscanf_r+0xee>
 8003682:	2305      	movs	r3, #5
 8003684:	e01b      	b.n	80036be <__ssvfiscanf_r+0x1da>
 8003686:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003688:	4621      	mov	r1, r4
 800368a:	4630      	mov	r0, r6
 800368c:	4798      	blx	r3
 800368e:	2800      	cmp	r0, #0
 8003690:	f43f af68 	beq.w	8003564 <__ssvfiscanf_r+0x80>
 8003694:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003696:	2800      	cmp	r0, #0
 8003698:	f040 808d 	bne.w	80037b6 <__ssvfiscanf_r+0x2d2>
 800369c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036a0:	e08f      	b.n	80037c2 <__ssvfiscanf_r+0x2de>
 80036a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80036a4:	f042 0220 	orr.w	r2, r2, #32
 80036a8:	9241      	str	r2, [sp, #260]	; 0x104
 80036aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80036ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b0:	9241      	str	r2, [sp, #260]	; 0x104
 80036b2:	2210      	movs	r2, #16
 80036b4:	2b6f      	cmp	r3, #111	; 0x6f
 80036b6:	9242      	str	r2, [sp, #264]	; 0x108
 80036b8:	bf34      	ite	cc
 80036ba:	2303      	movcc	r3, #3
 80036bc:	2304      	movcs	r3, #4
 80036be:	9347      	str	r3, [sp, #284]	; 0x11c
 80036c0:	6863      	ldr	r3, [r4, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	dd42      	ble.n	800374c <__ssvfiscanf_r+0x268>
 80036c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80036c8:	0659      	lsls	r1, r3, #25
 80036ca:	d404      	bmi.n	80036d6 <__ssvfiscanf_r+0x1f2>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	781a      	ldrb	r2, [r3, #0]
 80036d0:	5cba      	ldrb	r2, [r7, r2]
 80036d2:	0712      	lsls	r2, r2, #28
 80036d4:	d441      	bmi.n	800375a <__ssvfiscanf_r+0x276>
 80036d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80036d8:	2b02      	cmp	r3, #2
 80036da:	dc50      	bgt.n	800377e <__ssvfiscanf_r+0x29a>
 80036dc:	466b      	mov	r3, sp
 80036de:	4622      	mov	r2, r4
 80036e0:	a941      	add	r1, sp, #260	; 0x104
 80036e2:	4630      	mov	r0, r6
 80036e4:	f000 f876 	bl	80037d4 <_scanf_chars>
 80036e8:	2801      	cmp	r0, #1
 80036ea:	d06e      	beq.n	80037ca <__ssvfiscanf_r+0x2e6>
 80036ec:	2802      	cmp	r0, #2
 80036ee:	f47f af20 	bne.w	8003532 <__ssvfiscanf_r+0x4e>
 80036f2:	e7cf      	b.n	8003694 <__ssvfiscanf_r+0x1b0>
 80036f4:	220a      	movs	r2, #10
 80036f6:	e7dd      	b.n	80036b4 <__ssvfiscanf_r+0x1d0>
 80036f8:	2300      	movs	r3, #0
 80036fa:	9342      	str	r3, [sp, #264]	; 0x108
 80036fc:	2303      	movs	r3, #3
 80036fe:	e7de      	b.n	80036be <__ssvfiscanf_r+0x1da>
 8003700:	2308      	movs	r3, #8
 8003702:	9342      	str	r3, [sp, #264]	; 0x108
 8003704:	2304      	movs	r3, #4
 8003706:	e7da      	b.n	80036be <__ssvfiscanf_r+0x1da>
 8003708:	4629      	mov	r1, r5
 800370a:	4640      	mov	r0, r8
 800370c:	f000 f9b4 	bl	8003a78 <__sccl>
 8003710:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003716:	9341      	str	r3, [sp, #260]	; 0x104
 8003718:	4605      	mov	r5, r0
 800371a:	2301      	movs	r3, #1
 800371c:	e7cf      	b.n	80036be <__ssvfiscanf_r+0x1da>
 800371e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003724:	9341      	str	r3, [sp, #260]	; 0x104
 8003726:	2300      	movs	r3, #0
 8003728:	e7c9      	b.n	80036be <__ssvfiscanf_r+0x1da>
 800372a:	2302      	movs	r3, #2
 800372c:	e7c7      	b.n	80036be <__ssvfiscanf_r+0x1da>
 800372e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003730:	06c3      	lsls	r3, r0, #27
 8003732:	f53f aefe 	bmi.w	8003532 <__ssvfiscanf_r+0x4e>
 8003736:	9b00      	ldr	r3, [sp, #0]
 8003738:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800373a:	1d19      	adds	r1, r3, #4
 800373c:	9100      	str	r1, [sp, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f010 0f01 	tst.w	r0, #1
 8003744:	bf14      	ite	ne
 8003746:	801a      	strhne	r2, [r3, #0]
 8003748:	601a      	streq	r2, [r3, #0]
 800374a:	e6f2      	b.n	8003532 <__ssvfiscanf_r+0x4e>
 800374c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800374e:	4621      	mov	r1, r4
 8003750:	4630      	mov	r0, r6
 8003752:	4798      	blx	r3
 8003754:	2800      	cmp	r0, #0
 8003756:	d0b6      	beq.n	80036c6 <__ssvfiscanf_r+0x1e2>
 8003758:	e79c      	b.n	8003694 <__ssvfiscanf_r+0x1b0>
 800375a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800375c:	3201      	adds	r2, #1
 800375e:	9245      	str	r2, [sp, #276]	; 0x114
 8003760:	6862      	ldr	r2, [r4, #4]
 8003762:	3a01      	subs	r2, #1
 8003764:	2a00      	cmp	r2, #0
 8003766:	6062      	str	r2, [r4, #4]
 8003768:	dd02      	ble.n	8003770 <__ssvfiscanf_r+0x28c>
 800376a:	3301      	adds	r3, #1
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	e7ad      	b.n	80036cc <__ssvfiscanf_r+0x1e8>
 8003770:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003772:	4621      	mov	r1, r4
 8003774:	4630      	mov	r0, r6
 8003776:	4798      	blx	r3
 8003778:	2800      	cmp	r0, #0
 800377a:	d0a7      	beq.n	80036cc <__ssvfiscanf_r+0x1e8>
 800377c:	e78a      	b.n	8003694 <__ssvfiscanf_r+0x1b0>
 800377e:	2b04      	cmp	r3, #4
 8003780:	dc0e      	bgt.n	80037a0 <__ssvfiscanf_r+0x2bc>
 8003782:	466b      	mov	r3, sp
 8003784:	4622      	mov	r2, r4
 8003786:	a941      	add	r1, sp, #260	; 0x104
 8003788:	4630      	mov	r0, r6
 800378a:	f000 f87d 	bl	8003888 <_scanf_i>
 800378e:	e7ab      	b.n	80036e8 <__ssvfiscanf_r+0x204>
 8003790:	08003431 	.word	0x08003431
 8003794:	080034ab 	.word	0x080034ab
 8003798:	0800407c 	.word	0x0800407c
 800379c:	0800405c 	.word	0x0800405c
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <__ssvfiscanf_r+0x2ec>)
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f43f aec5 	beq.w	8003532 <__ssvfiscanf_r+0x4e>
 80037a8:	466b      	mov	r3, sp
 80037aa:	4622      	mov	r2, r4
 80037ac:	a941      	add	r1, sp, #260	; 0x104
 80037ae:	4630      	mov	r0, r6
 80037b0:	f3af 8000 	nop.w
 80037b4:	e798      	b.n	80036e8 <__ssvfiscanf_r+0x204>
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037bc:	bf18      	it	ne
 80037be:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80037c2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80037c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ca:	9844      	ldr	r0, [sp, #272]	; 0x110
 80037cc:	e7f9      	b.n	80037c2 <__ssvfiscanf_r+0x2de>
 80037ce:	bf00      	nop
 80037d0:	00000000 	.word	0x00000000

080037d4 <_scanf_chars>:
 80037d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037d8:	4615      	mov	r5, r2
 80037da:	688a      	ldr	r2, [r1, #8]
 80037dc:	4680      	mov	r8, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	b932      	cbnz	r2, 80037f0 <_scanf_chars+0x1c>
 80037e2:	698a      	ldr	r2, [r1, #24]
 80037e4:	2a00      	cmp	r2, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2201      	moveq	r2, #1
 80037ea:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80037ee:	608a      	str	r2, [r1, #8]
 80037f0:	6822      	ldr	r2, [r4, #0]
 80037f2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003884 <_scanf_chars+0xb0>
 80037f6:	06d1      	lsls	r1, r2, #27
 80037f8:	bf5f      	itttt	pl
 80037fa:	681a      	ldrpl	r2, [r3, #0]
 80037fc:	1d11      	addpl	r1, r2, #4
 80037fe:	6019      	strpl	r1, [r3, #0]
 8003800:	6816      	ldrpl	r6, [r2, #0]
 8003802:	2700      	movs	r7, #0
 8003804:	69a0      	ldr	r0, [r4, #24]
 8003806:	b188      	cbz	r0, 800382c <_scanf_chars+0x58>
 8003808:	2801      	cmp	r0, #1
 800380a:	d107      	bne.n	800381c <_scanf_chars+0x48>
 800380c:	682a      	ldr	r2, [r5, #0]
 800380e:	7811      	ldrb	r1, [r2, #0]
 8003810:	6962      	ldr	r2, [r4, #20]
 8003812:	5c52      	ldrb	r2, [r2, r1]
 8003814:	b952      	cbnz	r2, 800382c <_scanf_chars+0x58>
 8003816:	2f00      	cmp	r7, #0
 8003818:	d031      	beq.n	800387e <_scanf_chars+0xaa>
 800381a:	e022      	b.n	8003862 <_scanf_chars+0x8e>
 800381c:	2802      	cmp	r0, #2
 800381e:	d120      	bne.n	8003862 <_scanf_chars+0x8e>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003828:	071b      	lsls	r3, r3, #28
 800382a:	d41a      	bmi.n	8003862 <_scanf_chars+0x8e>
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	06da      	lsls	r2, r3, #27
 8003830:	bf5e      	ittt	pl
 8003832:	682b      	ldrpl	r3, [r5, #0]
 8003834:	781b      	ldrbpl	r3, [r3, #0]
 8003836:	f806 3b01 	strbpl.w	r3, [r6], #1
 800383a:	682a      	ldr	r2, [r5, #0]
 800383c:	686b      	ldr	r3, [r5, #4]
 800383e:	3201      	adds	r2, #1
 8003840:	602a      	str	r2, [r5, #0]
 8003842:	68a2      	ldr	r2, [r4, #8]
 8003844:	3b01      	subs	r3, #1
 8003846:	3a01      	subs	r2, #1
 8003848:	606b      	str	r3, [r5, #4]
 800384a:	3701      	adds	r7, #1
 800384c:	60a2      	str	r2, [r4, #8]
 800384e:	b142      	cbz	r2, 8003862 <_scanf_chars+0x8e>
 8003850:	2b00      	cmp	r3, #0
 8003852:	dcd7      	bgt.n	8003804 <_scanf_chars+0x30>
 8003854:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003858:	4629      	mov	r1, r5
 800385a:	4640      	mov	r0, r8
 800385c:	4798      	blx	r3
 800385e:	2800      	cmp	r0, #0
 8003860:	d0d0      	beq.n	8003804 <_scanf_chars+0x30>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	f013 0310 	ands.w	r3, r3, #16
 8003868:	d105      	bne.n	8003876 <_scanf_chars+0xa2>
 800386a:	68e2      	ldr	r2, [r4, #12]
 800386c:	3201      	adds	r2, #1
 800386e:	60e2      	str	r2, [r4, #12]
 8003870:	69a2      	ldr	r2, [r4, #24]
 8003872:	b102      	cbz	r2, 8003876 <_scanf_chars+0xa2>
 8003874:	7033      	strb	r3, [r6, #0]
 8003876:	6923      	ldr	r3, [r4, #16]
 8003878:	443b      	add	r3, r7
 800387a:	6123      	str	r3, [r4, #16]
 800387c:	2000      	movs	r0, #0
 800387e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003882:	bf00      	nop
 8003884:	0800407c 	.word	0x0800407c

08003888 <_scanf_i>:
 8003888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388c:	4698      	mov	r8, r3
 800388e:	4b76      	ldr	r3, [pc, #472]	; (8003a68 <_scanf_i+0x1e0>)
 8003890:	460c      	mov	r4, r1
 8003892:	4682      	mov	sl, r0
 8003894:	4616      	mov	r6, r2
 8003896:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800389a:	b087      	sub	sp, #28
 800389c:	ab03      	add	r3, sp, #12
 800389e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038a2:	4b72      	ldr	r3, [pc, #456]	; (8003a6c <_scanf_i+0x1e4>)
 80038a4:	69a1      	ldr	r1, [r4, #24]
 80038a6:	4a72      	ldr	r2, [pc, #456]	; (8003a70 <_scanf_i+0x1e8>)
 80038a8:	2903      	cmp	r1, #3
 80038aa:	bf18      	it	ne
 80038ac:	461a      	movne	r2, r3
 80038ae:	68a3      	ldr	r3, [r4, #8]
 80038b0:	9201      	str	r2, [sp, #4]
 80038b2:	1e5a      	subs	r2, r3, #1
 80038b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80038b8:	bf88      	it	hi
 80038ba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80038be:	4627      	mov	r7, r4
 80038c0:	bf82      	ittt	hi
 80038c2:	eb03 0905 	addhi.w	r9, r3, r5
 80038c6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80038ca:	60a3      	strhi	r3, [r4, #8]
 80038cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80038d0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80038d4:	bf98      	it	ls
 80038d6:	f04f 0900 	movls.w	r9, #0
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	463d      	mov	r5, r7
 80038de:	f04f 0b00 	mov.w	fp, #0
 80038e2:	6831      	ldr	r1, [r6, #0]
 80038e4:	ab03      	add	r3, sp, #12
 80038e6:	7809      	ldrb	r1, [r1, #0]
 80038e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f7fc fc8f 	bl	8000210 <memchr>
 80038f2:	b328      	cbz	r0, 8003940 <_scanf_i+0xb8>
 80038f4:	f1bb 0f01 	cmp.w	fp, #1
 80038f8:	d159      	bne.n	80039ae <_scanf_i+0x126>
 80038fa:	6862      	ldr	r2, [r4, #4]
 80038fc:	b92a      	cbnz	r2, 800390a <_scanf_i+0x82>
 80038fe:	6822      	ldr	r2, [r4, #0]
 8003900:	2308      	movs	r3, #8
 8003902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003906:	6063      	str	r3, [r4, #4]
 8003908:	6022      	str	r2, [r4, #0]
 800390a:	6822      	ldr	r2, [r4, #0]
 800390c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003910:	6022      	str	r2, [r4, #0]
 8003912:	68a2      	ldr	r2, [r4, #8]
 8003914:	1e51      	subs	r1, r2, #1
 8003916:	60a1      	str	r1, [r4, #8]
 8003918:	b192      	cbz	r2, 8003940 <_scanf_i+0xb8>
 800391a:	6832      	ldr	r2, [r6, #0]
 800391c:	1c51      	adds	r1, r2, #1
 800391e:	6031      	str	r1, [r6, #0]
 8003920:	7812      	ldrb	r2, [r2, #0]
 8003922:	f805 2b01 	strb.w	r2, [r5], #1
 8003926:	6872      	ldr	r2, [r6, #4]
 8003928:	3a01      	subs	r2, #1
 800392a:	2a00      	cmp	r2, #0
 800392c:	6072      	str	r2, [r6, #4]
 800392e:	dc07      	bgt.n	8003940 <_scanf_i+0xb8>
 8003930:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003934:	4631      	mov	r1, r6
 8003936:	4650      	mov	r0, sl
 8003938:	4790      	blx	r2
 800393a:	2800      	cmp	r0, #0
 800393c:	f040 8085 	bne.w	8003a4a <_scanf_i+0x1c2>
 8003940:	f10b 0b01 	add.w	fp, fp, #1
 8003944:	f1bb 0f03 	cmp.w	fp, #3
 8003948:	d1cb      	bne.n	80038e2 <_scanf_i+0x5a>
 800394a:	6863      	ldr	r3, [r4, #4]
 800394c:	b90b      	cbnz	r3, 8003952 <_scanf_i+0xca>
 800394e:	230a      	movs	r3, #10
 8003950:	6063      	str	r3, [r4, #4]
 8003952:	6863      	ldr	r3, [r4, #4]
 8003954:	4947      	ldr	r1, [pc, #284]	; (8003a74 <_scanf_i+0x1ec>)
 8003956:	6960      	ldr	r0, [r4, #20]
 8003958:	1ac9      	subs	r1, r1, r3
 800395a:	f000 f88d 	bl	8003a78 <__sccl>
 800395e:	f04f 0b00 	mov.w	fp, #0
 8003962:	68a3      	ldr	r3, [r4, #8]
 8003964:	6822      	ldr	r2, [r4, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d03d      	beq.n	80039e6 <_scanf_i+0x15e>
 800396a:	6831      	ldr	r1, [r6, #0]
 800396c:	6960      	ldr	r0, [r4, #20]
 800396e:	f891 c000 	ldrb.w	ip, [r1]
 8003972:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003976:	2800      	cmp	r0, #0
 8003978:	d035      	beq.n	80039e6 <_scanf_i+0x15e>
 800397a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800397e:	d124      	bne.n	80039ca <_scanf_i+0x142>
 8003980:	0510      	lsls	r0, r2, #20
 8003982:	d522      	bpl.n	80039ca <_scanf_i+0x142>
 8003984:	f10b 0b01 	add.w	fp, fp, #1
 8003988:	f1b9 0f00 	cmp.w	r9, #0
 800398c:	d003      	beq.n	8003996 <_scanf_i+0x10e>
 800398e:	3301      	adds	r3, #1
 8003990:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003994:	60a3      	str	r3, [r4, #8]
 8003996:	6873      	ldr	r3, [r6, #4]
 8003998:	3b01      	subs	r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	6073      	str	r3, [r6, #4]
 800399e:	dd1b      	ble.n	80039d8 <_scanf_i+0x150>
 80039a0:	6833      	ldr	r3, [r6, #0]
 80039a2:	3301      	adds	r3, #1
 80039a4:	6033      	str	r3, [r6, #0]
 80039a6:	68a3      	ldr	r3, [r4, #8]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	60a3      	str	r3, [r4, #8]
 80039ac:	e7d9      	b.n	8003962 <_scanf_i+0xda>
 80039ae:	f1bb 0f02 	cmp.w	fp, #2
 80039b2:	d1ae      	bne.n	8003912 <_scanf_i+0x8a>
 80039b4:	6822      	ldr	r2, [r4, #0]
 80039b6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80039ba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80039be:	d1bf      	bne.n	8003940 <_scanf_i+0xb8>
 80039c0:	2310      	movs	r3, #16
 80039c2:	6063      	str	r3, [r4, #4]
 80039c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039c8:	e7a2      	b.n	8003910 <_scanf_i+0x88>
 80039ca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80039ce:	6022      	str	r2, [r4, #0]
 80039d0:	780b      	ldrb	r3, [r1, #0]
 80039d2:	f805 3b01 	strb.w	r3, [r5], #1
 80039d6:	e7de      	b.n	8003996 <_scanf_i+0x10e>
 80039d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80039dc:	4631      	mov	r1, r6
 80039de:	4650      	mov	r0, sl
 80039e0:	4798      	blx	r3
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d0df      	beq.n	80039a6 <_scanf_i+0x11e>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	05db      	lsls	r3, r3, #23
 80039ea:	d50d      	bpl.n	8003a08 <_scanf_i+0x180>
 80039ec:	42bd      	cmp	r5, r7
 80039ee:	d909      	bls.n	8003a04 <_scanf_i+0x17c>
 80039f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80039f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039f8:	4632      	mov	r2, r6
 80039fa:	4650      	mov	r0, sl
 80039fc:	4798      	blx	r3
 80039fe:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8003a02:	464d      	mov	r5, r9
 8003a04:	42bd      	cmp	r5, r7
 8003a06:	d02d      	beq.n	8003a64 <_scanf_i+0x1dc>
 8003a08:	6822      	ldr	r2, [r4, #0]
 8003a0a:	f012 0210 	ands.w	r2, r2, #16
 8003a0e:	d113      	bne.n	8003a38 <_scanf_i+0x1b0>
 8003a10:	702a      	strb	r2, [r5, #0]
 8003a12:	6863      	ldr	r3, [r4, #4]
 8003a14:	9e01      	ldr	r6, [sp, #4]
 8003a16:	4639      	mov	r1, r7
 8003a18:	4650      	mov	r0, sl
 8003a1a:	47b0      	blx	r6
 8003a1c:	6821      	ldr	r1, [r4, #0]
 8003a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a22:	f011 0f20 	tst.w	r1, #32
 8003a26:	d013      	beq.n	8003a50 <_scanf_i+0x1c8>
 8003a28:	1d1a      	adds	r2, r3, #4
 8003a2a:	f8c8 2000 	str.w	r2, [r8]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6018      	str	r0, [r3, #0]
 8003a32:	68e3      	ldr	r3, [r4, #12]
 8003a34:	3301      	adds	r3, #1
 8003a36:	60e3      	str	r3, [r4, #12]
 8003a38:	1bed      	subs	r5, r5, r7
 8003a3a:	44ab      	add	fp, r5
 8003a3c:	6925      	ldr	r5, [r4, #16]
 8003a3e:	445d      	add	r5, fp
 8003a40:	6125      	str	r5, [r4, #16]
 8003a42:	2000      	movs	r0, #0
 8003a44:	b007      	add	sp, #28
 8003a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a4a:	f04f 0b00 	mov.w	fp, #0
 8003a4e:	e7ca      	b.n	80039e6 <_scanf_i+0x15e>
 8003a50:	1d1a      	adds	r2, r3, #4
 8003a52:	f8c8 2000 	str.w	r2, [r8]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f011 0f01 	tst.w	r1, #1
 8003a5c:	bf14      	ite	ne
 8003a5e:	8018      	strhne	r0, [r3, #0]
 8003a60:	6018      	streq	r0, [r3, #0]
 8003a62:	e7e6      	b.n	8003a32 <_scanf_i+0x1aa>
 8003a64:	2001      	movs	r0, #1
 8003a66:	e7ed      	b.n	8003a44 <_scanf_i+0x1bc>
 8003a68:	08004024 	.word	0x08004024
 8003a6c:	08003cd5 	.word	0x08003cd5
 8003a70:	08003bed 	.word	0x08003bed
 8003a74:	08004079 	.word	0x08004079

08003a78 <__sccl>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	780b      	ldrb	r3, [r1, #0]
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	2b5e      	cmp	r3, #94	; 0x5e
 8003a80:	bf0b      	itete	eq
 8003a82:	784b      	ldrbeq	r3, [r1, #1]
 8003a84:	1c48      	addne	r0, r1, #1
 8003a86:	1c88      	addeq	r0, r1, #2
 8003a88:	2200      	movne	r2, #0
 8003a8a:	bf08      	it	eq
 8003a8c:	2201      	moveq	r2, #1
 8003a8e:	1e61      	subs	r1, r4, #1
 8003a90:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003a94:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003a98:	42a9      	cmp	r1, r5
 8003a9a:	d1fb      	bne.n	8003a94 <__sccl+0x1c>
 8003a9c:	b90b      	cbnz	r3, 8003aa2 <__sccl+0x2a>
 8003a9e:	3801      	subs	r0, #1
 8003aa0:	bd70      	pop	{r4, r5, r6, pc}
 8003aa2:	f082 0201 	eor.w	r2, r2, #1
 8003aa6:	54e2      	strb	r2, [r4, r3]
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003ab0:	292d      	cmp	r1, #45	; 0x2d
 8003ab2:	d006      	beq.n	8003ac2 <__sccl+0x4a>
 8003ab4:	295d      	cmp	r1, #93	; 0x5d
 8003ab6:	d0f3      	beq.n	8003aa0 <__sccl+0x28>
 8003ab8:	b909      	cbnz	r1, 8003abe <__sccl+0x46>
 8003aba:	4628      	mov	r0, r5
 8003abc:	e7f0      	b.n	8003aa0 <__sccl+0x28>
 8003abe:	460b      	mov	r3, r1
 8003ac0:	e7f1      	b.n	8003aa6 <__sccl+0x2e>
 8003ac2:	786e      	ldrb	r6, [r5, #1]
 8003ac4:	2e5d      	cmp	r6, #93	; 0x5d
 8003ac6:	d0fa      	beq.n	8003abe <__sccl+0x46>
 8003ac8:	42b3      	cmp	r3, r6
 8003aca:	dcf8      	bgt.n	8003abe <__sccl+0x46>
 8003acc:	3502      	adds	r5, #2
 8003ace:	4619      	mov	r1, r3
 8003ad0:	3101      	adds	r1, #1
 8003ad2:	428e      	cmp	r6, r1
 8003ad4:	5462      	strb	r2, [r4, r1]
 8003ad6:	dcfb      	bgt.n	8003ad0 <__sccl+0x58>
 8003ad8:	1af1      	subs	r1, r6, r3
 8003ada:	3901      	subs	r1, #1
 8003adc:	1c58      	adds	r0, r3, #1
 8003ade:	42b3      	cmp	r3, r6
 8003ae0:	bfa8      	it	ge
 8003ae2:	2100      	movge	r1, #0
 8003ae4:	1843      	adds	r3, r0, r1
 8003ae6:	e7e0      	b.n	8003aaa <__sccl+0x32>

08003ae8 <_strtol_l.constprop.0>:
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aee:	d001      	beq.n	8003af4 <_strtol_l.constprop.0+0xc>
 8003af0:	2b24      	cmp	r3, #36	; 0x24
 8003af2:	d906      	bls.n	8003b02 <_strtol_l.constprop.0+0x1a>
 8003af4:	f7ff fc3c 	bl	8003370 <__errno>
 8003af8:	2316      	movs	r3, #22
 8003afa:	6003      	str	r3, [r0, #0]
 8003afc:	2000      	movs	r0, #0
 8003afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003be8 <_strtol_l.constprop.0+0x100>
 8003b06:	460d      	mov	r5, r1
 8003b08:	462e      	mov	r6, r5
 8003b0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003b12:	f017 0708 	ands.w	r7, r7, #8
 8003b16:	d1f7      	bne.n	8003b08 <_strtol_l.constprop.0+0x20>
 8003b18:	2c2d      	cmp	r4, #45	; 0x2d
 8003b1a:	d132      	bne.n	8003b82 <_strtol_l.constprop.0+0x9a>
 8003b1c:	782c      	ldrb	r4, [r5, #0]
 8003b1e:	2701      	movs	r7, #1
 8003b20:	1cb5      	adds	r5, r6, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d05b      	beq.n	8003bde <_strtol_l.constprop.0+0xf6>
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d109      	bne.n	8003b3e <_strtol_l.constprop.0+0x56>
 8003b2a:	2c30      	cmp	r4, #48	; 0x30
 8003b2c:	d107      	bne.n	8003b3e <_strtol_l.constprop.0+0x56>
 8003b2e:	782c      	ldrb	r4, [r5, #0]
 8003b30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003b34:	2c58      	cmp	r4, #88	; 0x58
 8003b36:	d14d      	bne.n	8003bd4 <_strtol_l.constprop.0+0xec>
 8003b38:	786c      	ldrb	r4, [r5, #1]
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	3502      	adds	r5, #2
 8003b3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003b42:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003b46:	f04f 0c00 	mov.w	ip, #0
 8003b4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8003b4e:	4666      	mov	r6, ip
 8003b50:	fb03 8a19 	mls	sl, r3, r9, r8
 8003b54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003b58:	f1be 0f09 	cmp.w	lr, #9
 8003b5c:	d816      	bhi.n	8003b8c <_strtol_l.constprop.0+0xa4>
 8003b5e:	4674      	mov	r4, lr
 8003b60:	42a3      	cmp	r3, r4
 8003b62:	dd24      	ble.n	8003bae <_strtol_l.constprop.0+0xc6>
 8003b64:	f1bc 0f00 	cmp.w	ip, #0
 8003b68:	db1e      	blt.n	8003ba8 <_strtol_l.constprop.0+0xc0>
 8003b6a:	45b1      	cmp	r9, r6
 8003b6c:	d31c      	bcc.n	8003ba8 <_strtol_l.constprop.0+0xc0>
 8003b6e:	d101      	bne.n	8003b74 <_strtol_l.constprop.0+0x8c>
 8003b70:	45a2      	cmp	sl, r4
 8003b72:	db19      	blt.n	8003ba8 <_strtol_l.constprop.0+0xc0>
 8003b74:	fb06 4603 	mla	r6, r6, r3, r4
 8003b78:	f04f 0c01 	mov.w	ip, #1
 8003b7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b80:	e7e8      	b.n	8003b54 <_strtol_l.constprop.0+0x6c>
 8003b82:	2c2b      	cmp	r4, #43	; 0x2b
 8003b84:	bf04      	itt	eq
 8003b86:	782c      	ldrbeq	r4, [r5, #0]
 8003b88:	1cb5      	addeq	r5, r6, #2
 8003b8a:	e7ca      	b.n	8003b22 <_strtol_l.constprop.0+0x3a>
 8003b8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003b90:	f1be 0f19 	cmp.w	lr, #25
 8003b94:	d801      	bhi.n	8003b9a <_strtol_l.constprop.0+0xb2>
 8003b96:	3c37      	subs	r4, #55	; 0x37
 8003b98:	e7e2      	b.n	8003b60 <_strtol_l.constprop.0+0x78>
 8003b9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003b9e:	f1be 0f19 	cmp.w	lr, #25
 8003ba2:	d804      	bhi.n	8003bae <_strtol_l.constprop.0+0xc6>
 8003ba4:	3c57      	subs	r4, #87	; 0x57
 8003ba6:	e7db      	b.n	8003b60 <_strtol_l.constprop.0+0x78>
 8003ba8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003bac:	e7e6      	b.n	8003b7c <_strtol_l.constprop.0+0x94>
 8003bae:	f1bc 0f00 	cmp.w	ip, #0
 8003bb2:	da05      	bge.n	8003bc0 <_strtol_l.constprop.0+0xd8>
 8003bb4:	2322      	movs	r3, #34	; 0x22
 8003bb6:	6003      	str	r3, [r0, #0]
 8003bb8:	4646      	mov	r6, r8
 8003bba:	b942      	cbnz	r2, 8003bce <_strtol_l.constprop.0+0xe6>
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	e79e      	b.n	8003afe <_strtol_l.constprop.0+0x16>
 8003bc0:	b107      	cbz	r7, 8003bc4 <_strtol_l.constprop.0+0xdc>
 8003bc2:	4276      	negs	r6, r6
 8003bc4:	2a00      	cmp	r2, #0
 8003bc6:	d0f9      	beq.n	8003bbc <_strtol_l.constprop.0+0xd4>
 8003bc8:	f1bc 0f00 	cmp.w	ip, #0
 8003bcc:	d000      	beq.n	8003bd0 <_strtol_l.constprop.0+0xe8>
 8003bce:	1e69      	subs	r1, r5, #1
 8003bd0:	6011      	str	r1, [r2, #0]
 8003bd2:	e7f3      	b.n	8003bbc <_strtol_l.constprop.0+0xd4>
 8003bd4:	2430      	movs	r4, #48	; 0x30
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1b1      	bne.n	8003b3e <_strtol_l.constprop.0+0x56>
 8003bda:	2308      	movs	r3, #8
 8003bdc:	e7af      	b.n	8003b3e <_strtol_l.constprop.0+0x56>
 8003bde:	2c30      	cmp	r4, #48	; 0x30
 8003be0:	d0a5      	beq.n	8003b2e <_strtol_l.constprop.0+0x46>
 8003be2:	230a      	movs	r3, #10
 8003be4:	e7ab      	b.n	8003b3e <_strtol_l.constprop.0+0x56>
 8003be6:	bf00      	nop
 8003be8:	0800407c 	.word	0x0800407c

08003bec <_strtol_r>:
 8003bec:	f7ff bf7c 	b.w	8003ae8 <_strtol_l.constprop.0>

08003bf0 <_strtoul_l.constprop.0>:
 8003bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bf4:	4f36      	ldr	r7, [pc, #216]	; (8003cd0 <_strtoul_l.constprop.0+0xe0>)
 8003bf6:	4686      	mov	lr, r0
 8003bf8:	460d      	mov	r5, r1
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c00:	5de6      	ldrb	r6, [r4, r7]
 8003c02:	f016 0608 	ands.w	r6, r6, #8
 8003c06:	d1f8      	bne.n	8003bfa <_strtoul_l.constprop.0+0xa>
 8003c08:	2c2d      	cmp	r4, #45	; 0x2d
 8003c0a:	d12f      	bne.n	8003c6c <_strtoul_l.constprop.0+0x7c>
 8003c0c:	782c      	ldrb	r4, [r5, #0]
 8003c0e:	2601      	movs	r6, #1
 8003c10:	1c85      	adds	r5, r0, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d057      	beq.n	8003cc6 <_strtoul_l.constprop.0+0xd6>
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d109      	bne.n	8003c2e <_strtoul_l.constprop.0+0x3e>
 8003c1a:	2c30      	cmp	r4, #48	; 0x30
 8003c1c:	d107      	bne.n	8003c2e <_strtoul_l.constprop.0+0x3e>
 8003c1e:	7828      	ldrb	r0, [r5, #0]
 8003c20:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003c24:	2858      	cmp	r0, #88	; 0x58
 8003c26:	d149      	bne.n	8003cbc <_strtoul_l.constprop.0+0xcc>
 8003c28:	786c      	ldrb	r4, [r5, #1]
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	3502      	adds	r5, #2
 8003c2e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003c32:	2700      	movs	r7, #0
 8003c34:	fbb8 f8f3 	udiv	r8, r8, r3
 8003c38:	fb03 f908 	mul.w	r9, r3, r8
 8003c3c:	ea6f 0909 	mvn.w	r9, r9
 8003c40:	4638      	mov	r0, r7
 8003c42:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003c46:	f1bc 0f09 	cmp.w	ip, #9
 8003c4a:	d814      	bhi.n	8003c76 <_strtoul_l.constprop.0+0x86>
 8003c4c:	4664      	mov	r4, ip
 8003c4e:	42a3      	cmp	r3, r4
 8003c50:	dd22      	ble.n	8003c98 <_strtoul_l.constprop.0+0xa8>
 8003c52:	2f00      	cmp	r7, #0
 8003c54:	db1d      	blt.n	8003c92 <_strtoul_l.constprop.0+0xa2>
 8003c56:	4580      	cmp	r8, r0
 8003c58:	d31b      	bcc.n	8003c92 <_strtoul_l.constprop.0+0xa2>
 8003c5a:	d101      	bne.n	8003c60 <_strtoul_l.constprop.0+0x70>
 8003c5c:	45a1      	cmp	r9, r4
 8003c5e:	db18      	blt.n	8003c92 <_strtoul_l.constprop.0+0xa2>
 8003c60:	fb00 4003 	mla	r0, r0, r3, r4
 8003c64:	2701      	movs	r7, #1
 8003c66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c6a:	e7ea      	b.n	8003c42 <_strtoul_l.constprop.0+0x52>
 8003c6c:	2c2b      	cmp	r4, #43	; 0x2b
 8003c6e:	bf04      	itt	eq
 8003c70:	782c      	ldrbeq	r4, [r5, #0]
 8003c72:	1c85      	addeq	r5, r0, #2
 8003c74:	e7cd      	b.n	8003c12 <_strtoul_l.constprop.0+0x22>
 8003c76:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003c7a:	f1bc 0f19 	cmp.w	ip, #25
 8003c7e:	d801      	bhi.n	8003c84 <_strtoul_l.constprop.0+0x94>
 8003c80:	3c37      	subs	r4, #55	; 0x37
 8003c82:	e7e4      	b.n	8003c4e <_strtoul_l.constprop.0+0x5e>
 8003c84:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003c88:	f1bc 0f19 	cmp.w	ip, #25
 8003c8c:	d804      	bhi.n	8003c98 <_strtoul_l.constprop.0+0xa8>
 8003c8e:	3c57      	subs	r4, #87	; 0x57
 8003c90:	e7dd      	b.n	8003c4e <_strtoul_l.constprop.0+0x5e>
 8003c92:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003c96:	e7e6      	b.n	8003c66 <_strtoul_l.constprop.0+0x76>
 8003c98:	2f00      	cmp	r7, #0
 8003c9a:	da07      	bge.n	8003cac <_strtoul_l.constprop.0+0xbc>
 8003c9c:	2322      	movs	r3, #34	; 0x22
 8003c9e:	f8ce 3000 	str.w	r3, [lr]
 8003ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ca6:	b932      	cbnz	r2, 8003cb6 <_strtoul_l.constprop.0+0xc6>
 8003ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cac:	b106      	cbz	r6, 8003cb0 <_strtoul_l.constprop.0+0xc0>
 8003cae:	4240      	negs	r0, r0
 8003cb0:	2a00      	cmp	r2, #0
 8003cb2:	d0f9      	beq.n	8003ca8 <_strtoul_l.constprop.0+0xb8>
 8003cb4:	b107      	cbz	r7, 8003cb8 <_strtoul_l.constprop.0+0xc8>
 8003cb6:	1e69      	subs	r1, r5, #1
 8003cb8:	6011      	str	r1, [r2, #0]
 8003cba:	e7f5      	b.n	8003ca8 <_strtoul_l.constprop.0+0xb8>
 8003cbc:	2430      	movs	r4, #48	; 0x30
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1b5      	bne.n	8003c2e <_strtoul_l.constprop.0+0x3e>
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	e7b3      	b.n	8003c2e <_strtoul_l.constprop.0+0x3e>
 8003cc6:	2c30      	cmp	r4, #48	; 0x30
 8003cc8:	d0a9      	beq.n	8003c1e <_strtoul_l.constprop.0+0x2e>
 8003cca:	230a      	movs	r3, #10
 8003ccc:	e7af      	b.n	8003c2e <_strtoul_l.constprop.0+0x3e>
 8003cce:	bf00      	nop
 8003cd0:	0800407c 	.word	0x0800407c

08003cd4 <_strtoul_r>:
 8003cd4:	f7ff bf8c 	b.w	8003bf0 <_strtoul_l.constprop.0>

08003cd8 <__submore>:
 8003cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cdc:	460c      	mov	r4, r1
 8003cde:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ce4:	4299      	cmp	r1, r3
 8003ce6:	d11d      	bne.n	8003d24 <__submore+0x4c>
 8003ce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cec:	f000 f8aa 	bl	8003e44 <_malloc_r>
 8003cf0:	b918      	cbnz	r0, 8003cfa <__submore+0x22>
 8003cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cfe:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d00:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003d04:	6360      	str	r0, [r4, #52]	; 0x34
 8003d06:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003d0a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003d0e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003d12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003d16:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8003d1a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003d1e:	6020      	str	r0, [r4, #0]
 8003d20:	2000      	movs	r0, #0
 8003d22:	e7e8      	b.n	8003cf6 <__submore+0x1e>
 8003d24:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003d26:	0077      	lsls	r7, r6, #1
 8003d28:	463a      	mov	r2, r7
 8003d2a:	f000 f8ff 	bl	8003f2c <_realloc_r>
 8003d2e:	4605      	mov	r5, r0
 8003d30:	2800      	cmp	r0, #0
 8003d32:	d0de      	beq.n	8003cf2 <__submore+0x1a>
 8003d34:	eb00 0806 	add.w	r8, r0, r6
 8003d38:	4601      	mov	r1, r0
 8003d3a:	4632      	mov	r2, r6
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	f000 f807 	bl	8003d50 <memcpy>
 8003d42:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003d46:	f8c4 8000 	str.w	r8, [r4]
 8003d4a:	e7e9      	b.n	8003d20 <__submore+0x48>

08003d4c <__retarget_lock_acquire_recursive>:
 8003d4c:	4770      	bx	lr

08003d4e <__retarget_lock_release_recursive>:
 8003d4e:	4770      	bx	lr

08003d50 <memcpy>:
 8003d50:	440a      	add	r2, r1
 8003d52:	4291      	cmp	r1, r2
 8003d54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003d58:	d100      	bne.n	8003d5c <memcpy+0xc>
 8003d5a:	4770      	bx	lr
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d66:	4291      	cmp	r1, r2
 8003d68:	d1f9      	bne.n	8003d5e <memcpy+0xe>
 8003d6a:	bd10      	pop	{r4, pc}

08003d6c <_free_r>:
 8003d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d6e:	2900      	cmp	r1, #0
 8003d70:	d044      	beq.n	8003dfc <_free_r+0x90>
 8003d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d76:	9001      	str	r0, [sp, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f1a1 0404 	sub.w	r4, r1, #4
 8003d7e:	bfb8      	it	lt
 8003d80:	18e4      	addlt	r4, r4, r3
 8003d82:	f000 f913 	bl	8003fac <__malloc_lock>
 8003d86:	4a1e      	ldr	r2, [pc, #120]	; (8003e00 <_free_r+0x94>)
 8003d88:	9801      	ldr	r0, [sp, #4]
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	b933      	cbnz	r3, 8003d9c <_free_r+0x30>
 8003d8e:	6063      	str	r3, [r4, #4]
 8003d90:	6014      	str	r4, [r2, #0]
 8003d92:	b003      	add	sp, #12
 8003d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d98:	f000 b90e 	b.w	8003fb8 <__malloc_unlock>
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	d908      	bls.n	8003db2 <_free_r+0x46>
 8003da0:	6825      	ldr	r5, [r4, #0]
 8003da2:	1961      	adds	r1, r4, r5
 8003da4:	428b      	cmp	r3, r1
 8003da6:	bf01      	itttt	eq
 8003da8:	6819      	ldreq	r1, [r3, #0]
 8003daa:	685b      	ldreq	r3, [r3, #4]
 8003dac:	1949      	addeq	r1, r1, r5
 8003dae:	6021      	streq	r1, [r4, #0]
 8003db0:	e7ed      	b.n	8003d8e <_free_r+0x22>
 8003db2:	461a      	mov	r2, r3
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	b10b      	cbz	r3, 8003dbc <_free_r+0x50>
 8003db8:	42a3      	cmp	r3, r4
 8003dba:	d9fa      	bls.n	8003db2 <_free_r+0x46>
 8003dbc:	6811      	ldr	r1, [r2, #0]
 8003dbe:	1855      	adds	r5, r2, r1
 8003dc0:	42a5      	cmp	r5, r4
 8003dc2:	d10b      	bne.n	8003ddc <_free_r+0x70>
 8003dc4:	6824      	ldr	r4, [r4, #0]
 8003dc6:	4421      	add	r1, r4
 8003dc8:	1854      	adds	r4, r2, r1
 8003dca:	42a3      	cmp	r3, r4
 8003dcc:	6011      	str	r1, [r2, #0]
 8003dce:	d1e0      	bne.n	8003d92 <_free_r+0x26>
 8003dd0:	681c      	ldr	r4, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	6053      	str	r3, [r2, #4]
 8003dd6:	4421      	add	r1, r4
 8003dd8:	6011      	str	r1, [r2, #0]
 8003dda:	e7da      	b.n	8003d92 <_free_r+0x26>
 8003ddc:	d902      	bls.n	8003de4 <_free_r+0x78>
 8003dde:	230c      	movs	r3, #12
 8003de0:	6003      	str	r3, [r0, #0]
 8003de2:	e7d6      	b.n	8003d92 <_free_r+0x26>
 8003de4:	6825      	ldr	r5, [r4, #0]
 8003de6:	1961      	adds	r1, r4, r5
 8003de8:	428b      	cmp	r3, r1
 8003dea:	bf04      	itt	eq
 8003dec:	6819      	ldreq	r1, [r3, #0]
 8003dee:	685b      	ldreq	r3, [r3, #4]
 8003df0:	6063      	str	r3, [r4, #4]
 8003df2:	bf04      	itt	eq
 8003df4:	1949      	addeq	r1, r1, r5
 8003df6:	6021      	streq	r1, [r4, #0]
 8003df8:	6054      	str	r4, [r2, #4]
 8003dfa:	e7ca      	b.n	8003d92 <_free_r+0x26>
 8003dfc:	b003      	add	sp, #12
 8003dfe:	bd30      	pop	{r4, r5, pc}
 8003e00:	20000180 	.word	0x20000180

08003e04 <sbrk_aligned>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4e0e      	ldr	r6, [pc, #56]	; (8003e40 <sbrk_aligned+0x3c>)
 8003e08:	460c      	mov	r4, r1
 8003e0a:	6831      	ldr	r1, [r6, #0]
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	b911      	cbnz	r1, 8003e16 <sbrk_aligned+0x12>
 8003e10:	f000 f8bc 	bl	8003f8c <_sbrk_r>
 8003e14:	6030      	str	r0, [r6, #0]
 8003e16:	4621      	mov	r1, r4
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f000 f8b7 	bl	8003f8c <_sbrk_r>
 8003e1e:	1c43      	adds	r3, r0, #1
 8003e20:	d00a      	beq.n	8003e38 <sbrk_aligned+0x34>
 8003e22:	1cc4      	adds	r4, r0, #3
 8003e24:	f024 0403 	bic.w	r4, r4, #3
 8003e28:	42a0      	cmp	r0, r4
 8003e2a:	d007      	beq.n	8003e3c <sbrk_aligned+0x38>
 8003e2c:	1a21      	subs	r1, r4, r0
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f000 f8ac 	bl	8003f8c <_sbrk_r>
 8003e34:	3001      	adds	r0, #1
 8003e36:	d101      	bne.n	8003e3c <sbrk_aligned+0x38>
 8003e38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
 8003e40:	20000184 	.word	0x20000184

08003e44 <_malloc_r>:
 8003e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e48:	1ccd      	adds	r5, r1, #3
 8003e4a:	f025 0503 	bic.w	r5, r5, #3
 8003e4e:	3508      	adds	r5, #8
 8003e50:	2d0c      	cmp	r5, #12
 8003e52:	bf38      	it	cc
 8003e54:	250c      	movcc	r5, #12
 8003e56:	2d00      	cmp	r5, #0
 8003e58:	4607      	mov	r7, r0
 8003e5a:	db01      	blt.n	8003e60 <_malloc_r+0x1c>
 8003e5c:	42a9      	cmp	r1, r5
 8003e5e:	d905      	bls.n	8003e6c <_malloc_r+0x28>
 8003e60:	230c      	movs	r3, #12
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	2600      	movs	r6, #0
 8003e66:	4630      	mov	r0, r6
 8003e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e6c:	4e2e      	ldr	r6, [pc, #184]	; (8003f28 <_malloc_r+0xe4>)
 8003e6e:	f000 f89d 	bl	8003fac <__malloc_lock>
 8003e72:	6833      	ldr	r3, [r6, #0]
 8003e74:	461c      	mov	r4, r3
 8003e76:	bb34      	cbnz	r4, 8003ec6 <_malloc_r+0x82>
 8003e78:	4629      	mov	r1, r5
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	f7ff ffc2 	bl	8003e04 <sbrk_aligned>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	4604      	mov	r4, r0
 8003e84:	d14d      	bne.n	8003f22 <_malloc_r+0xde>
 8003e86:	6834      	ldr	r4, [r6, #0]
 8003e88:	4626      	mov	r6, r4
 8003e8a:	2e00      	cmp	r6, #0
 8003e8c:	d140      	bne.n	8003f10 <_malloc_r+0xcc>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	4631      	mov	r1, r6
 8003e92:	4638      	mov	r0, r7
 8003e94:	eb04 0803 	add.w	r8, r4, r3
 8003e98:	f000 f878 	bl	8003f8c <_sbrk_r>
 8003e9c:	4580      	cmp	r8, r0
 8003e9e:	d13a      	bne.n	8003f16 <_malloc_r+0xd2>
 8003ea0:	6821      	ldr	r1, [r4, #0]
 8003ea2:	3503      	adds	r5, #3
 8003ea4:	1a6d      	subs	r5, r5, r1
 8003ea6:	f025 0503 	bic.w	r5, r5, #3
 8003eaa:	3508      	adds	r5, #8
 8003eac:	2d0c      	cmp	r5, #12
 8003eae:	bf38      	it	cc
 8003eb0:	250c      	movcc	r5, #12
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	f7ff ffa5 	bl	8003e04 <sbrk_aligned>
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d02b      	beq.n	8003f16 <_malloc_r+0xd2>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	442b      	add	r3, r5
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	e00e      	b.n	8003ee4 <_malloc_r+0xa0>
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	1b52      	subs	r2, r2, r5
 8003eca:	d41e      	bmi.n	8003f0a <_malloc_r+0xc6>
 8003ecc:	2a0b      	cmp	r2, #11
 8003ece:	d916      	bls.n	8003efe <_malloc_r+0xba>
 8003ed0:	1961      	adds	r1, r4, r5
 8003ed2:	42a3      	cmp	r3, r4
 8003ed4:	6025      	str	r5, [r4, #0]
 8003ed6:	bf18      	it	ne
 8003ed8:	6059      	strne	r1, [r3, #4]
 8003eda:	6863      	ldr	r3, [r4, #4]
 8003edc:	bf08      	it	eq
 8003ede:	6031      	streq	r1, [r6, #0]
 8003ee0:	5162      	str	r2, [r4, r5]
 8003ee2:	604b      	str	r3, [r1, #4]
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f104 060b 	add.w	r6, r4, #11
 8003eea:	f000 f865 	bl	8003fb8 <__malloc_unlock>
 8003eee:	f026 0607 	bic.w	r6, r6, #7
 8003ef2:	1d23      	adds	r3, r4, #4
 8003ef4:	1af2      	subs	r2, r6, r3
 8003ef6:	d0b6      	beq.n	8003e66 <_malloc_r+0x22>
 8003ef8:	1b9b      	subs	r3, r3, r6
 8003efa:	50a3      	str	r3, [r4, r2]
 8003efc:	e7b3      	b.n	8003e66 <_malloc_r+0x22>
 8003efe:	6862      	ldr	r2, [r4, #4]
 8003f00:	42a3      	cmp	r3, r4
 8003f02:	bf0c      	ite	eq
 8003f04:	6032      	streq	r2, [r6, #0]
 8003f06:	605a      	strne	r2, [r3, #4]
 8003f08:	e7ec      	b.n	8003ee4 <_malloc_r+0xa0>
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	6864      	ldr	r4, [r4, #4]
 8003f0e:	e7b2      	b.n	8003e76 <_malloc_r+0x32>
 8003f10:	4634      	mov	r4, r6
 8003f12:	6876      	ldr	r6, [r6, #4]
 8003f14:	e7b9      	b.n	8003e8a <_malloc_r+0x46>
 8003f16:	230c      	movs	r3, #12
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	f000 f84c 	bl	8003fb8 <__malloc_unlock>
 8003f20:	e7a1      	b.n	8003e66 <_malloc_r+0x22>
 8003f22:	6025      	str	r5, [r4, #0]
 8003f24:	e7de      	b.n	8003ee4 <_malloc_r+0xa0>
 8003f26:	bf00      	nop
 8003f28:	20000180 	.word	0x20000180

08003f2c <_realloc_r>:
 8003f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f30:	4680      	mov	r8, r0
 8003f32:	4614      	mov	r4, r2
 8003f34:	460e      	mov	r6, r1
 8003f36:	b921      	cbnz	r1, 8003f42 <_realloc_r+0x16>
 8003f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	f7ff bf81 	b.w	8003e44 <_malloc_r>
 8003f42:	b92a      	cbnz	r2, 8003f50 <_realloc_r+0x24>
 8003f44:	f7ff ff12 	bl	8003d6c <_free_r>
 8003f48:	4625      	mov	r5, r4
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f50:	f000 f838 	bl	8003fc4 <_malloc_usable_size_r>
 8003f54:	4284      	cmp	r4, r0
 8003f56:	4607      	mov	r7, r0
 8003f58:	d802      	bhi.n	8003f60 <_realloc_r+0x34>
 8003f5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f5e:	d812      	bhi.n	8003f86 <_realloc_r+0x5a>
 8003f60:	4621      	mov	r1, r4
 8003f62:	4640      	mov	r0, r8
 8003f64:	f7ff ff6e 	bl	8003e44 <_malloc_r>
 8003f68:	4605      	mov	r5, r0
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d0ed      	beq.n	8003f4a <_realloc_r+0x1e>
 8003f6e:	42bc      	cmp	r4, r7
 8003f70:	4622      	mov	r2, r4
 8003f72:	4631      	mov	r1, r6
 8003f74:	bf28      	it	cs
 8003f76:	463a      	movcs	r2, r7
 8003f78:	f7ff feea 	bl	8003d50 <memcpy>
 8003f7c:	4631      	mov	r1, r6
 8003f7e:	4640      	mov	r0, r8
 8003f80:	f7ff fef4 	bl	8003d6c <_free_r>
 8003f84:	e7e1      	b.n	8003f4a <_realloc_r+0x1e>
 8003f86:	4635      	mov	r5, r6
 8003f88:	e7df      	b.n	8003f4a <_realloc_r+0x1e>
	...

08003f8c <_sbrk_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4d06      	ldr	r5, [pc, #24]	; (8003fa8 <_sbrk_r+0x1c>)
 8003f90:	2300      	movs	r3, #0
 8003f92:	4604      	mov	r4, r0
 8003f94:	4608      	mov	r0, r1
 8003f96:	602b      	str	r3, [r5, #0]
 8003f98:	f7fc ff46 	bl	8000e28 <_sbrk>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d102      	bne.n	8003fa6 <_sbrk_r+0x1a>
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	b103      	cbz	r3, 8003fa6 <_sbrk_r+0x1a>
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	20000178 	.word	0x20000178

08003fac <__malloc_lock>:
 8003fac:	4801      	ldr	r0, [pc, #4]	; (8003fb4 <__malloc_lock+0x8>)
 8003fae:	f7ff becd 	b.w	8003d4c <__retarget_lock_acquire_recursive>
 8003fb2:	bf00      	nop
 8003fb4:	2000017c 	.word	0x2000017c

08003fb8 <__malloc_unlock>:
 8003fb8:	4801      	ldr	r0, [pc, #4]	; (8003fc0 <__malloc_unlock+0x8>)
 8003fba:	f7ff bec8 	b.w	8003d4e <__retarget_lock_release_recursive>
 8003fbe:	bf00      	nop
 8003fc0:	2000017c 	.word	0x2000017c

08003fc4 <_malloc_usable_size_r>:
 8003fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc8:	1f18      	subs	r0, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bfbc      	itt	lt
 8003fce:	580b      	ldrlt	r3, [r1, r0]
 8003fd0:	18c0      	addlt	r0, r0, r3
 8003fd2:	4770      	bx	lr

08003fd4 <_init>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr

08003fe0 <_fini>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr
