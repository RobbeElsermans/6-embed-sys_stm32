
Blink_LL_DRIVERS_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000192c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001ac4  08001ac4  00011ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001adc  08001adc  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08001adc  08001adc  00011adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ae4  08001ae4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ae4  08001ae4  00011ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ae8  08001ae8  00011ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001af0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001af0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a5e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dd4  00000000  00000000  00023a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  00024868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004a8  00000000  00000000  00024d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000103c3  00000000  00000000  00025240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003b7a  00000000  00000000  00035603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d7f3  00000000  00000000  0003917d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00096970  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001468  00000000  00000000  000969c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001aac 	.word	0x08001aac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08001aac 	.word	0x08001aac

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f003 0307 	and.w	r3, r3, #7
 80004ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <__NVIC_SetPriorityGrouping+0x44>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004f8:	4013      	ands	r3, r2
 80004fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800050c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800050e:	4a04      	ldr	r2, [pc, #16]	; (8000520 <__NVIC_SetPriorityGrouping+0x44>)
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	60d3      	str	r3, [r2, #12]
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <LL_RCC_HSI_Enable+0x1c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <LL_RCC_HSI_Enable+0x1c>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	6013      	str	r3, [r2, #0]
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800

08000544 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <LL_RCC_HSI_IsReady+0x20>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f003 0302 	and.w	r3, r3, #2
 8000550:	2b02      	cmp	r3, #2
 8000552:	bf0c      	ite	eq
 8000554:	2301      	moveq	r3, #1
 8000556:	2300      	movne	r3, #0
 8000558:	b2db      	uxtb	r3, r3
}
 800055a:	4618      	mov	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40023800 	.word	0x40023800

08000568 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	4904      	ldr	r1, [pc, #16]	; (8000590 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800057e:	4313      	orrs	r3, r2
 8000580:	600b      	str	r3, [r1, #0]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800

08000594 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_RCC_SetSysClkSource+0x24>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	f023 0203 	bic.w	r2, r3, #3
 80005a4:	4904      	ldr	r1, [pc, #16]	; (80005b8 <LL_RCC_SetSysClkSource+0x24>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	608b      	str	r3, [r1, #8]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40023800 	.word	0x40023800

080005bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <LL_RCC_GetSysClkSource+0x18>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	f003 030c 	and.w	r3, r3, #12
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800

080005d8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <LL_RCC_SetAHBPrescaler+0x24>)
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80005e8:	4904      	ldr	r1, [pc, #16]	; (80005fc <LL_RCC_SetAHBPrescaler+0x24>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	608b      	str	r3, [r1, #8]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40023800 	.word	0x40023800

08000600 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <LL_RCC_SetAPB1Prescaler+0x24>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000610:	4904      	ldr	r1, [pc, #16]	; (8000624 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	608b      	str	r3, [r1, #8]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40023800 	.word	0x40023800

08000628 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000638:	4904      	ldr	r1, [pc, #16]	; (800064c <LL_RCC_SetAPB2Prescaler+0x24>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4313      	orrs	r3, r2
 800063e:	608b      	str	r3, [r1, #8]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	40023800 	.word	0x40023800

08000650 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <LL_RCC_SetTIMPrescaler+0x28>)
 800065a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800065e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000662:	4905      	ldr	r1, [pc, #20]	; (8000678 <LL_RCC_SetTIMPrescaler+0x28>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4313      	orrs	r3, r2
 8000668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40023800 	.word	0x40023800

0800067c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <LL_RCC_PLL_Enable+0x1c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <LL_RCC_PLL_Enable+0x1c>)
 8000686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800

0800069c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <LL_RCC_PLL_IsReady+0x24>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80006ac:	bf0c      	ite	eq
 80006ae:	2301      	moveq	r3, #1
 80006b0:	2300      	movne	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800

080006c4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80006d8:	4013      	ands	r3, r2
 80006da:	68f9      	ldr	r1, [r7, #12]
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	4311      	orrs	r1, r2
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	0192      	lsls	r2, r2, #6
 80006e4:	430a      	orrs	r2, r1
 80006e6:	4908      	ldr	r1, [pc, #32]	; (8000708 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006e8:	4313      	orrs	r3, r2
 80006ea:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006f4:	4904      	ldr	r1, [pc, #16]	; (8000708 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	40023800 	.word	0x40023800
 800070c:	ffbf8000 	.word	0xffbf8000

08000710 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800071a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071c:	4907      	ldr	r1, [pc, #28]	; (800073c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4313      	orrs	r3, r2
 8000722:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4013      	ands	r3, r2
 800072c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	40023800 	.word	0x40023800

08000740 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <LL_APB1_GRP1_EnableClock+0x2c>)
 800074a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800074c:	4907      	ldr	r1, [pc, #28]	; (800076c <LL_APB1_GRP1_EnableClock+0x2c>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4313      	orrs	r3, r2
 8000752:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4013      	ands	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800075e:	68fb      	ldr	r3, [r7, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40023800 	.word	0x40023800

08000770 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <LL_APB2_GRP1_EnableClock+0x2c>)
 800077a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800077c:	4907      	ldr	r1, [pc, #28]	; (800079c <LL_APB2_GRP1_EnableClock+0x2c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4013      	ands	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40023800 	.word	0x40023800

080007a0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80007aa:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <LL_SYSCFG_SetEXTISource+0x58>)
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	3302      	adds	r3, #2
 80007b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	0c1b      	lsrs	r3, r3, #16
 80007ba:	43db      	mvns	r3, r3
 80007bc:	ea02 0103 	and.w	r1, r2, r3
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	0c1b      	lsrs	r3, r3, #16
 80007c4:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	fa93 f3a3 	rbit	r3, r3
 80007cc:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	fab3 f383 	clz	r3, r3
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	fa03 f202 	lsl.w	r2, r3, r2
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <LL_SYSCFG_SetEXTISource+0x58>)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	430a      	orrs	r2, r1
 80007e6:	3302      	adds	r3, #2
 80007e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40013800 	.word	0x40013800

080007fc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <LL_FLASH_SetLatency+0x24>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f023 0207 	bic.w	r2, r3, #7
 800080c:	4904      	ldr	r1, [pc, #16]	; (8000820 <LL_FLASH_SetLatency+0x24>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4313      	orrs	r3, r2
 8000812:	600b      	str	r3, [r1, #0]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	40023c00 	.word	0x40023c00

08000824 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <LL_FLASH_GetLatency+0x18>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 0307 	and.w	r3, r3, #7
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023c00 	.word	0x40023c00

08000840 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000850:	4904      	ldr	r1, [pc, #16]	; (8000864 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4313      	orrs	r3, r2
 8000856:	600b      	str	r3, [r1, #0]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	40007000 	.word	0x40007000

08000868 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	60da      	str	r2, [r3, #12]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	615a      	str	r2, [r3, #20]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa93 f3a3 	rbit	r3, r3
 80008ce:	613b      	str	r3, [r7, #16]
  return result;
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	fab3 f383 	clz	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2103      	movs	r1, #3
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	401a      	ands	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	fa93 f3a3 	rbit	r3, r3
 80008ee:	61bb      	str	r3, [r7, #24]
  return result;
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fab3 f383 	clz	r3, r3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	431a      	orrs	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	601a      	str	r2, [r3, #0]
}
 8000906:	bf00      	nop
 8000908:	3724      	adds	r7, #36	; 0x24
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000912:	b480      	push	{r7}
 8000914:	b089      	sub	sp, #36	; 0x24
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	fa93 f3a3 	rbit	r3, r3
 800092c:	613b      	str	r3, [r7, #16]
  return result;
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	fab3 f383 	clz	r3, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	2103      	movs	r1, #3
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	401a      	ands	r2, r3
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	fa93 f3a3 	rbit	r3, r3
 800094c:	61bb      	str	r3, [r7, #24]
  return result;
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	fab3 f383 	clz	r3, r3
 8000954:	b2db      	uxtb	r3, r3
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	431a      	orrs	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	60da      	str	r2, [r3, #12]
}
 8000964:	bf00      	nop
 8000966:	3724      	adds	r7, #36	; 0x24
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	041a      	lsls	r2, r3, #16
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	619a      	str	r2, [r3, #24]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800098e:	b480      	push	{r7}
 8000990:	b085      	sub	sp, #20
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	4013      	ands	r3, r2
 80009a4:	041a      	lsls	r2, r3, #16
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	43d9      	mvns	r1, r3
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	400b      	ands	r3, r1
 80009ae:	431a      	orrs	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	619a      	str	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80009c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009ca:	f7ff fed1 	bl	8000770 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80009ce:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80009d2:	f7ff feb5 	bl	8000740 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f7ff fd80 	bl	80004dc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009dc:	f000 f81a 	bl	8000a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e0:	f000 f8b2 	bl	8000b48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009e4:	f000 f860 	bl	8000aa8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t timer = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(long i = 0; i < 8000000; i++){
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	e002      	b.n	80009f8 <main+0x38>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3301      	adds	r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <main+0x4c>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	dbf8      	blt.n	80009f2 <main+0x32>

		  //Doe niets
	  }

	  //Toggle PA5
	  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
 8000a00:	2120      	movs	r1, #32
 8000a02:	4803      	ldr	r0, [pc, #12]	; (8000a10 <main+0x50>)
 8000a04:	f7ff ffc3 	bl	800098e <LL_GPIO_TogglePin>
	  for(long i = 0; i < 8000000; i++){
 8000a08:	e7f0      	b.n	80009ec <main+0x2c>
 8000a0a:	bf00      	nop
 8000a0c:	007a1200 	.word	0x007a1200
 8000a10:	40020000 	.word	0x40020000

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f7ff feef 	bl	80007fc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ff00 	bl	8000824 <LL_FLASH_GetLatency>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d1fa      	bne.n	8000a20 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a2a:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8000a2e:	f7ff ff07 	bl	8000840 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000a32:	2010      	movs	r0, #16
 8000a34:	f7ff fd98 	bl	8000568 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000a38:	f7ff fd74 	bl	8000524 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000a3c:	bf00      	nop
 8000a3e:	f7ff fd81 	bl	8000544 <LL_RCC_HSI_IsReady>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d1fa      	bne.n	8000a3e <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8000a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000a50:	2110      	movs	r1, #16
 8000a52:	2000      	movs	r0, #0
 8000a54:	f7ff fe36 	bl	80006c4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a58:	f7ff fe10 	bl	800067c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a5c:	bf00      	nop
 8000a5e:	f7ff fe1d 	bl	800069c <LL_RCC_PLL_IsReady>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d1fa      	bne.n	8000a5e <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fdb5 	bl	80005d8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000a6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a72:	f7ff fdc5 	bl	8000600 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff fdd6 	bl	8000628 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f7ff fd89 	bl	8000594 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a82:	bf00      	nop
 8000a84:	f7ff fd9a 	bl	80005bc <LL_RCC_GetSysClkSource>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b08      	cmp	r3, #8
 8000a8c:	d1fa      	bne.n	8000a84 <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(84000000);
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <SystemClock_Config+0x90>)
 8000a90:	f000 ffca 	bl	8001a28 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <SystemClock_Config+0x90>)
 8000a96:	f000 ffd5 	bl	8001a44 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fdd8 	bl	8000650 <LL_RCC_SetTIMPrescaler>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	0501bd00 	.word	0x0501bd00

08000aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	; 0x38
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
 8000ad0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000ad2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ad6:	f7ff fe33 	bl	8000740 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff fe18 	bl	8000710 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000af4:	2307      	movs	r3, #7
 8000af6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4619      	mov	r1, r3
 8000afc:	4810      	ldr	r0, [pc, #64]	; (8000b40 <MX_USART2_UART_Init+0x98>)
 8000afe:	f000 fb01 	bl	8001104 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000b02:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b06:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b14:	230c      	movs	r3, #12
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4807      	ldr	r0, [pc, #28]	; (8000b44 <MX_USART2_UART_Init+0x9c>)
 8000b28:	f000 ff00 	bl	800192c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART2_UART_Init+0x9c>)
 8000b2e:	f7ff feab 	bl	8000888 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000b32:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_USART2_UART_Init+0x9c>)
 8000b34:	f7ff fe98 	bl	8000868 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3738      	adds	r7, #56	; 0x38
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40004400 	.word	0x40004400

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000b4e:	f107 0318 	add.w	r3, r7, #24
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
 8000b66:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000b68:	2004      	movs	r0, #4
 8000b6a:	f7ff fdd1 	bl	8000710 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000b6e:	2080      	movs	r0, #128	; 0x80
 8000b70:	f7ff fdce 	bl	8000710 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fdcb 	bl	8000710 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f7ff fdc8 	bl	8000710 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000b80:	2120      	movs	r1, #32
 8000b82:	481a      	ldr	r0, [pc, #104]	; (8000bec <MX_GPIO_Init+0xa4>)
 8000b84:	f7ff fef4 	bl	8000970 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000b88:	4919      	ldr	r1, [pc, #100]	; (8000bf0 <MX_GPIO_Init+0xa8>)
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f7ff fe08 	bl	80007a0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b94:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000b96:	2301      	movs	r3, #1
 8000b98:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ba2:	f107 0318 	add.w	r3, r7, #24
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f926 	bl	8000df8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <MX_GPIO_Init+0xac>)
 8000bb4:	f7ff fead 	bl	8000912 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_GPIO_Init+0xac>)
 8000bc0:	f7ff fe78 	bl	80008b4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bc4:	2320      	movs	r3, #32
 8000bc6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <MX_GPIO_Init+0xa4>)
 8000bde:	f000 fa91 	bl	8001104 <LL_GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	00f00003 	.word	0x00f00003
 8000bf4:	40020800 	.word	0x40020800

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopFillZerobss+0x12>
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x16>)
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1a>)
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LoopFillZerobss+0x1e>)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:
 8000c82:	58d4      	ldr	r4, [r2, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:
 8000c88:	18c4      	adds	r4, r0, r3
 8000c8a:	428c      	cmp	r4, r1
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopFillZerobss+0x22>)
 8000c90:	4c0b      	ldr	r4, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x26>)
 8000c92:	2300      	movs	r3, #0
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:
 8000c9a:	42a2      	cmp	r2, r4
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>
 8000c9e:	f7ff ffd7 	bl	8000c50 <SystemInit>
 8000ca2:	f000 fedf 	bl	8001a64 <__libc_init_array>
 8000ca6:	f7ff fe8b 	bl	80009c0 <main>
 8000caa:	4770      	bx	lr
 8000cac:	20020000 	.word	0x20020000
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	08001aec 	.word	0x08001aec
 8000cbc:	20000004 	.word	0x20000004
 8000cc0:	20000020 	.word	0x20000020

08000cc4 <ADC_IRQHandler>:
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <LL_EXTI_EnableIT_0_31+0x20>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4904      	ldr	r1, [pc, #16]	; (8000ce8 <LL_EXTI_EnableIT_0_31+0x20>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	600b      	str	r3, [r1, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40013c00 	.word	0x40013c00

08000cec <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <LL_EXTI_DisableIT_0_31+0x24>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	4904      	ldr	r1, [pc, #16]	; (8000d10 <LL_EXTI_DisableIT_0_31+0x24>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40013c00 	.word	0x40013c00

08000d14 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	4904      	ldr	r1, [pc, #16]	; (8000d34 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]

}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40013c00 	.word	0x40013c00

08000d38 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	4904      	ldr	r1, [pc, #16]	; (8000d5c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	604b      	str	r3, [r1, #4]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40013c00 	.word	0x40013c00

08000d60 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	4904      	ldr	r1, [pc, #16]	; (8000d80 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	608b      	str	r3, [r1, #8]

}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	40013c00 	.word	0x40013c00

08000d84 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	4904      	ldr	r1, [pc, #16]	; (8000da8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000d96:	4013      	ands	r3, r2
 8000d98:	608b      	str	r3, [r1, #8]

}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40013c00 	.word	0x40013c00

08000dac <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	4904      	ldr	r1, [pc, #16]	; (8000dcc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	60cb      	str	r3, [r1, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40013c00 	.word	0x40013c00

08000dd0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	4904      	ldr	r1, [pc, #16]	; (8000df4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	60cb      	str	r3, [r1, #12]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40013c00 	.word	0x40013c00

08000df8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	791b      	ldrb	r3, [r3, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d065      	beq.n	8000ed8 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d06c      	beq.n	8000eee <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	795b      	ldrb	r3, [r3, #5]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d01c      	beq.n	8000e56 <LL_EXTI_Init+0x5e>
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	dc25      	bgt.n	8000e6c <LL_EXTI_Init+0x74>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <LL_EXTI_Init+0x32>
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d00b      	beq.n	8000e40 <LL_EXTI_Init+0x48>
 8000e28:	e020      	b.n	8000e6c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff82 	bl	8000d38 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff45 	bl	8000cc8 <LL_EXTI_EnableIT_0_31>
          break;
 8000e3e:	e018      	b.n	8000e72 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff51 	bl	8000cec <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff60 	bl	8000d14 <LL_EXTI_EnableEvent_0_31>
          break;
 8000e54:	e00d      	b.n	8000e72 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff34 	bl	8000cc8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff55 	bl	8000d14 <LL_EXTI_EnableEvent_0_31>
          break;
 8000e6a:	e002      	b.n	8000e72 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
          break;
 8000e70:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	799b      	ldrb	r3, [r3, #6]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d039      	beq.n	8000eee <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	799b      	ldrb	r3, [r3, #6]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d01c      	beq.n	8000ebc <LL_EXTI_Init+0xc4>
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	dc25      	bgt.n	8000ed2 <LL_EXTI_Init+0xda>
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d002      	beq.n	8000e90 <LL_EXTI_Init+0x98>
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d00b      	beq.n	8000ea6 <LL_EXTI_Init+0xae>
 8000e8e:	e020      	b.n	8000ed2 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff9b 	bl	8000dd0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff5e 	bl	8000d60 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000ea4:	e024      	b.n	8000ef0 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff6a 	bl	8000d84 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff79 	bl	8000dac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000eba:	e019      	b.n	8000ef0 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff4d 	bl	8000d60 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff6e 	bl	8000dac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000ed0:	e00e      	b.n	8000ef0 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
            break;
 8000ed6:	e00b      	b.n	8000ef0 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff05 	bl	8000cec <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff26 	bl	8000d38 <LL_EXTI_DisableEvent_0_31>
 8000eec:	e000      	b.n	8000ef0 <LL_EXTI_Init+0xf8>
      }
 8000eee:	bf00      	nop
  }
  return status;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <LL_GPIO_SetPinMode>:
{
 8000efa:	b480      	push	{r7}
 8000efc:	b089      	sub	sp, #36	; 0x24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	613b      	str	r3, [r7, #16]
  return result;
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	fab3 f383 	clz	r3, r3
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2103      	movs	r1, #3
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	401a      	ands	r2, r3
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	61bb      	str	r3, [r7, #24]
  return result;
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	fab3 f383 	clz	r3, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	431a      	orrs	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	3724      	adds	r7, #36	; 0x24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_GPIO_SetPinOutputType>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	fb01 f303 	mul.w	r3, r1, r3
 8000f76:	431a      	orrs	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	605a      	str	r2, [r3, #4]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_GPIO_SetPinSpeed>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa93 f3a3 	rbit	r3, r3
 8000fa2:	613b      	str	r3, [r7, #16]
  return result;
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	fab3 f383 	clz	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2103      	movs	r1, #3
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	61bb      	str	r3, [r7, #24]
  return result;
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	fab3 f383 	clz	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	609a      	str	r2, [r3, #8]
}
 8000fda:	bf00      	nop
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_GPIO_SetPinPull>:
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b089      	sub	sp, #36	; 0x24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	613b      	str	r3, [r7, #16]
  return result;
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2103      	movs	r1, #3
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	401a      	ands	r2, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa93 f3a3 	rbit	r3, r3
 8001020:	61bb      	str	r3, [r7, #24]
  return result;
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	fab3 f383 	clz	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	431a      	orrs	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	60da      	str	r2, [r3, #12]
}
 8001038:	bf00      	nop
 800103a:	3724      	adds	r7, #36	; 0x24
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_GPIO_SetAFPin_0_7>:
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a1a      	ldr	r2, [r3, #32]
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	613b      	str	r3, [r7, #16]
  return result;
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	fab3 f383 	clz	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	210f      	movs	r1, #15
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	401a      	ands	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	61bb      	str	r3, [r7, #24]
  return result;
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fab3 f383 	clz	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	431a      	orrs	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	621a      	str	r2, [r3, #32]
}
 8001096:	bf00      	nop
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_GPIO_SetAFPin_8_15>:
{
 80010a2:	b480      	push	{r7}
 80010a4:	b089      	sub	sp, #36	; 0x24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	613b      	str	r3, [r7, #16]
  return result;
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	fab3 f383 	clz	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	210f      	movs	r1, #15
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	401a      	ands	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	0a1b      	lsrs	r3, r3, #8
 80010d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	61bb      	str	r3, [r7, #24]
  return result;
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	fab3 f383 	clz	r3, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	431a      	orrs	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010f8:	bf00      	nop
 80010fa:	3724      	adds	r7, #36	; 0x24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	613b      	str	r3, [r7, #16]
  return result;
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800112e:	e050      	b.n	80011d2 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d042      	beq.n	80011cc <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d003      	beq.n	8001156 <LL_GPIO_Init+0x52>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d10d      	bne.n	8001172 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	461a      	mov	r2, r3
 800115c:	69b9      	ldr	r1, [r7, #24]
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ff12 	bl	8000f88 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	461a      	mov	r2, r3
 800116a:	69b9      	ldr	r1, [r7, #24]
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff fef3 	bl	8000f58 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	461a      	mov	r2, r3
 8001178:	69b9      	ldr	r1, [r7, #24]
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff33 	bl	8000fe6 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d11a      	bne.n	80011be <LL_GPIO_Init+0xba>
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	60bb      	str	r3, [r7, #8]
  return result;
 8001194:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001196:	fab3 f383 	clz	r3, r3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b07      	cmp	r3, #7
 800119e:	d807      	bhi.n	80011b0 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	461a      	mov	r2, r3
 80011a6:	69b9      	ldr	r1, [r7, #24]
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff4b 	bl	8001044 <LL_GPIO_SetAFPin_0_7>
 80011ae:	e006      	b.n	80011be <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	461a      	mov	r2, r3
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff72 	bl	80010a2 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	461a      	mov	r2, r3
 80011c4:	69b9      	ldr	r1, [r7, #24]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fe97 	bl	8000efa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	3301      	adds	r3, #1
 80011d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1a7      	bne.n	8001130 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <LL_RCC_GetSysClkSource>:
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <LL_RCC_GetSysClkSource+0x18>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 030c 	and.w	r3, r3, #12
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <LL_RCC_GetAHBPrescaler>:
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <LL_RCC_GetAHBPrescaler+0x18>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <LL_RCC_GetAPB1Prescaler>:
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <LL_RCC_GetAPB1Prescaler+0x18>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <LL_RCC_GetAPB2Prescaler>:
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <LL_RCC_PLL_GetMainSource+0x18>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <LL_RCC_PLL_GetN+0x18>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	099b      	lsrs	r3, r3, #6
 8001282:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40023800 	.word	0x40023800

08001294 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <LL_RCC_PLL_GetP+0x18>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <LL_RCC_PLL_GetDivider+0x18>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80012d4:	f000 f820 	bl	8001318 <RCC_GetSystemClockFreq>
 80012d8:	4602      	mov	r2, r0
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f840 	bl	8001368 <RCC_GetHCLKClockFreq>
 80012e8:	4602      	mov	r2, r0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f84e 	bl	8001394 <RCC_GetPCLK1ClockFreq>
 80012f8:	4602      	mov	r2, r0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f85a 	bl	80013bc <RCC_GetPCLK2ClockFreq>
 8001308:	4602      	mov	r2, r0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60da      	str	r2, [r3, #12]
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001322:	f7ff ff63 	bl	80011ec <LL_RCC_GetSysClkSource>
 8001326:	4603      	mov	r3, r0
 8001328:	2b08      	cmp	r3, #8
 800132a:	d00c      	beq.n	8001346 <RCC_GetSystemClockFreq+0x2e>
 800132c:	2b08      	cmp	r3, #8
 800132e:	d80f      	bhi.n	8001350 <RCC_GetSystemClockFreq+0x38>
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <RCC_GetSystemClockFreq+0x22>
 8001334:	2b04      	cmp	r3, #4
 8001336:	d003      	beq.n	8001340 <RCC_GetSystemClockFreq+0x28>
 8001338:	e00a      	b.n	8001350 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <RCC_GetSystemClockFreq+0x48>)
 800133c:	607b      	str	r3, [r7, #4]
      break;
 800133e:	e00a      	b.n	8001356 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <RCC_GetSystemClockFreq+0x4c>)
 8001342:	607b      	str	r3, [r7, #4]
      break;
 8001344:	e007      	b.n	8001356 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001346:	2008      	movs	r0, #8
 8001348:	f000 f84c 	bl	80013e4 <RCC_PLL_GetFreqDomain_SYS>
 800134c:	6078      	str	r0, [r7, #4]
      break;
 800134e:	e002      	b.n	8001356 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <RCC_GetSystemClockFreq+0x48>)
 8001352:	607b      	str	r3, [r7, #4]
      break;
 8001354:	bf00      	nop
  }

  return frequency;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	00f42400 	.word	0x00f42400
 8001364:	007a1200 	.word	0x007a1200

08001368 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001370:	f7ff ff4a 	bl	8001208 <LL_RCC_GetAHBPrescaler>
 8001374:	4603      	mov	r3, r0
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <RCC_GetHCLKClockFreq+0x28>)
 800137e:	5cd3      	ldrb	r3, [r2, r3]
 8001380:	461a      	mov	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	40d3      	lsrs	r3, r2
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	08001ac4 	.word	0x08001ac4

08001394 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800139c:	f7ff ff42 	bl	8001224 <LL_RCC_GetAPB1Prescaler>
 80013a0:	4603      	mov	r3, r0
 80013a2:	0a9b      	lsrs	r3, r3, #10
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <RCC_GetPCLK1ClockFreq+0x24>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	461a      	mov	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	40d3      	lsrs	r3, r2
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	08001ad4 	.word	0x08001ad4

080013bc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80013c4:	f7ff ff3c 	bl	8001240 <LL_RCC_GetAPB2Prescaler>
 80013c8:	4603      	mov	r3, r0
 80013ca:	0b5b      	lsrs	r3, r3, #13
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <RCC_GetPCLK2ClockFreq+0x24>)
 80013ce:	5cd3      	ldrb	r3, [r2, r3]
 80013d0:	461a      	mov	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	40d3      	lsrs	r3, r2
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	08001ad4 	.word	0x08001ad4

080013e4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80013f8:	f7ff ff30 	bl	800125c <LL_RCC_PLL_GetMainSource>
 80013fc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d004      	beq.n	800140e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800140a:	d003      	beq.n	8001414 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800140c:	e005      	b.n	800141a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001410:	617b      	str	r3, [r7, #20]
      break;
 8001412:	e005      	b.n	8001420 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001416:	617b      	str	r3, [r7, #20]
      break;
 8001418:	e002      	b.n	8001420 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800141c:	617b      	str	r3, [r7, #20]
      break;
 800141e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b08      	cmp	r3, #8
 8001424:	d113      	bne.n	800144e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001426:	f7ff ff43 	bl	80012b0 <LL_RCC_PLL_GetDivider>
 800142a:	4602      	mov	r2, r0
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fbb3 f4f2 	udiv	r4, r3, r2
 8001432:	f7ff ff21 	bl	8001278 <LL_RCC_PLL_GetN>
 8001436:	4603      	mov	r3, r0
 8001438:	fb03 f404 	mul.w	r4, r3, r4
 800143c:	f7ff ff2a 	bl	8001294 <LL_RCC_PLL_GetP>
 8001440:	4603      	mov	r3, r0
 8001442:	0c1b      	lsrs	r3, r3, #16
 8001444:	3301      	adds	r3, #1
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fbb4 f3f3 	udiv	r3, r4, r3
 800144c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800144e:	693b      	ldr	r3, [r7, #16]
}
 8001450:	4618      	mov	r0, r3
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	00f42400 	.word	0x00f42400
 800145c:	007a1200 	.word	0x007a1200

08001460 <LL_USART_IsEnabled>:
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001474:	bf0c      	ite	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	2300      	movne	r3, #0
 800147a:	b2db      	uxtb	r3, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_USART_SetStopBitsLength>:
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	611a      	str	r2, [r3, #16]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_USART_SetHWFlowCtrl>:
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	615a      	str	r2, [r3, #20]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_USART_SetBaudRate>:
{
 80014d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014d8:	b0c0      	sub	sp, #256	; 0x100
 80014da:	af00      	add	r7, sp, #0
 80014dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80014e0:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80014e4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80014e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80014ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014f4:	f040 810c 	bne.w	8001710 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80014f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80014fc:	2200      	movs	r2, #0
 80014fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001502:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001506:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800150a:	4622      	mov	r2, r4
 800150c:	462b      	mov	r3, r5
 800150e:	1891      	adds	r1, r2, r2
 8001510:	6639      	str	r1, [r7, #96]	; 0x60
 8001512:	415b      	adcs	r3, r3
 8001514:	667b      	str	r3, [r7, #100]	; 0x64
 8001516:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800151a:	4621      	mov	r1, r4
 800151c:	eb12 0801 	adds.w	r8, r2, r1
 8001520:	4629      	mov	r1, r5
 8001522:	eb43 0901 	adc.w	r9, r3, r1
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800153a:	4690      	mov	r8, r2
 800153c:	4699      	mov	r9, r3
 800153e:	4623      	mov	r3, r4
 8001540:	eb18 0303 	adds.w	r3, r8, r3
 8001544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001548:	462b      	mov	r3, r5
 800154a:	eb49 0303 	adc.w	r3, r9, r3
 800154e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001552:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001556:	2200      	movs	r2, #0
 8001558:	469a      	mov	sl, r3
 800155a:	4693      	mov	fp, r2
 800155c:	eb1a 030a 	adds.w	r3, sl, sl
 8001560:	65bb      	str	r3, [r7, #88]	; 0x58
 8001562:	eb4b 030b 	adc.w	r3, fp, fp
 8001566:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001568:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800156c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001570:	f7fe fe32 	bl	80001d8 <__aeabi_uldivmod>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4b64      	ldr	r3, [pc, #400]	; (800170c <LL_USART_SetBaudRate+0x238>)
 800157a:	fba3 2302 	umull	r2, r3, r3, r2
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	b29b      	uxth	r3, r3
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	b29c      	uxth	r4, r3
 8001586:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800158a:	2200      	movs	r2, #0
 800158c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001590:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001594:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8001598:	4642      	mov	r2, r8
 800159a:	464b      	mov	r3, r9
 800159c:	1891      	adds	r1, r2, r2
 800159e:	6539      	str	r1, [r7, #80]	; 0x50
 80015a0:	415b      	adcs	r3, r3
 80015a2:	657b      	str	r3, [r7, #84]	; 0x54
 80015a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015a8:	4641      	mov	r1, r8
 80015aa:	1851      	adds	r1, r2, r1
 80015ac:	64b9      	str	r1, [r7, #72]	; 0x48
 80015ae:	4649      	mov	r1, r9
 80015b0:	414b      	adcs	r3, r1
 80015b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80015c0:	4659      	mov	r1, fp
 80015c2:	00cb      	lsls	r3, r1, #3
 80015c4:	4651      	mov	r1, sl
 80015c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015ca:	4651      	mov	r1, sl
 80015cc:	00ca      	lsls	r2, r1, #3
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	4603      	mov	r3, r0
 80015d4:	4642      	mov	r2, r8
 80015d6:	189b      	adds	r3, r3, r2
 80015d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80015dc:	464b      	mov	r3, r9
 80015de:	460a      	mov	r2, r1
 80015e0:	eb42 0303 	adc.w	r3, r2, r3
 80015e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80015e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80015ec:	2200      	movs	r2, #0
 80015ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80015f2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80015f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80015fa:	460b      	mov	r3, r1
 80015fc:	18db      	adds	r3, r3, r3
 80015fe:	643b      	str	r3, [r7, #64]	; 0x40
 8001600:	4613      	mov	r3, r2
 8001602:	eb42 0303 	adc.w	r3, r2, r3
 8001606:	647b      	str	r3, [r7, #68]	; 0x44
 8001608:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800160c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001610:	f7fe fde2 	bl	80001d8 <__aeabi_uldivmod>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4611      	mov	r1, r2
 800161a:	4b3c      	ldr	r3, [pc, #240]	; (800170c <LL_USART_SetBaudRate+0x238>)
 800161c:	fba3 2301 	umull	r2, r3, r3, r1
 8001620:	095b      	lsrs	r3, r3, #5
 8001622:	2264      	movs	r2, #100	; 0x64
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	1acb      	subs	r3, r1, r3
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <LL_USART_SetBaudRate+0x238>)
 8001632:	fba3 2302 	umull	r2, r3, r3, r2
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	b29b      	uxth	r3, r3
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	b29b      	uxth	r3, r3
 800163e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001642:	b29b      	uxth	r3, r3
 8001644:	4423      	add	r3, r4
 8001646:	b29c      	uxth	r4, r3
 8001648:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800164c:	2200      	movs	r2, #0
 800164e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001652:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001656:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800165a:	4642      	mov	r2, r8
 800165c:	464b      	mov	r3, r9
 800165e:	1891      	adds	r1, r2, r2
 8001660:	63b9      	str	r1, [r7, #56]	; 0x38
 8001662:	415b      	adcs	r3, r3
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001666:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800166a:	4641      	mov	r1, r8
 800166c:	1851      	adds	r1, r2, r1
 800166e:	6339      	str	r1, [r7, #48]	; 0x30
 8001670:	4649      	mov	r1, r9
 8001672:	414b      	adcs	r3, r1
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001682:	4659      	mov	r1, fp
 8001684:	00cb      	lsls	r3, r1, #3
 8001686:	4651      	mov	r1, sl
 8001688:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800168c:	4651      	mov	r1, sl
 800168e:	00ca      	lsls	r2, r1, #3
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	4603      	mov	r3, r0
 8001696:	4642      	mov	r2, r8
 8001698:	189b      	adds	r3, r3, r2
 800169a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800169e:	464b      	mov	r3, r9
 80016a0:	460a      	mov	r2, r1
 80016a2:	eb42 0303 	adc.w	r3, r2, r3
 80016a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80016aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80016ae:	2200      	movs	r2, #0
 80016b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80016b4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80016b8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80016bc:	460b      	mov	r3, r1
 80016be:	18db      	adds	r3, r3, r3
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016c2:	4613      	mov	r3, r2
 80016c4:	eb42 0303 	adc.w	r3, r2, r3
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016ce:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80016d2:	f7fe fd81 	bl	80001d8 <__aeabi_uldivmod>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <LL_USART_SetBaudRate+0x238>)
 80016dc:	fba3 1302 	umull	r1, r3, r3, r2
 80016e0:	095b      	lsrs	r3, r3, #5
 80016e2:	2164      	movs	r1, #100	; 0x64
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	3332      	adds	r3, #50	; 0x32
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <LL_USART_SetBaudRate+0x238>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	095b      	lsrs	r3, r3, #5
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	4423      	add	r3, r4
 8001700:	b29b      	uxth	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001708:	609a      	str	r2, [r3, #8]
}
 800170a:	e107      	b.n	800191c <LL_USART_SetBaudRate+0x448>
 800170c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001710:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001714:	2200      	movs	r2, #0
 8001716:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800171a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800171e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001722:	4642      	mov	r2, r8
 8001724:	464b      	mov	r3, r9
 8001726:	1891      	adds	r1, r2, r2
 8001728:	6239      	str	r1, [r7, #32]
 800172a:	415b      	adcs	r3, r3
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
 800172e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001732:	4641      	mov	r1, r8
 8001734:	1854      	adds	r4, r2, r1
 8001736:	4649      	mov	r1, r9
 8001738:	eb43 0501 	adc.w	r5, r3, r1
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	00eb      	lsls	r3, r5, #3
 8001746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800174a:	00e2      	lsls	r2, r4, #3
 800174c:	4614      	mov	r4, r2
 800174e:	461d      	mov	r5, r3
 8001750:	4643      	mov	r3, r8
 8001752:	18e3      	adds	r3, r4, r3
 8001754:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001758:	464b      	mov	r3, r9
 800175a:	eb45 0303 	adc.w	r3, r5, r3
 800175e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001762:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001766:	2200      	movs	r2, #0
 8001768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800176c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800177c:	4629      	mov	r1, r5
 800177e:	008b      	lsls	r3, r1, #2
 8001780:	4621      	mov	r1, r4
 8001782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001786:	4621      	mov	r1, r4
 8001788:	008a      	lsls	r2, r1, #2
 800178a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800178e:	f7fe fd23 	bl	80001d8 <__aeabi_uldivmod>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4b64      	ldr	r3, [pc, #400]	; (8001928 <LL_USART_SetBaudRate+0x454>)
 8001798:	fba3 2302 	umull	r2, r3, r3, r2
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b29b      	uxth	r3, r3
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	b29c      	uxth	r4, r3
 80017a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80017a8:	2200      	movs	r2, #0
 80017aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80017b2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80017b6:	4642      	mov	r2, r8
 80017b8:	464b      	mov	r3, r9
 80017ba:	1891      	adds	r1, r2, r2
 80017bc:	61b9      	str	r1, [r7, #24]
 80017be:	415b      	adcs	r3, r3
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017c6:	4641      	mov	r1, r8
 80017c8:	1851      	adds	r1, r2, r1
 80017ca:	6139      	str	r1, [r7, #16]
 80017cc:	4649      	mov	r1, r9
 80017ce:	414b      	adcs	r3, r1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017de:	4659      	mov	r1, fp
 80017e0:	00cb      	lsls	r3, r1, #3
 80017e2:	4651      	mov	r1, sl
 80017e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017e8:	4651      	mov	r1, sl
 80017ea:	00ca      	lsls	r2, r1, #3
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	4603      	mov	r3, r0
 80017f2:	4642      	mov	r2, r8
 80017f4:	189b      	adds	r3, r3, r2
 80017f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017fa:	464b      	mov	r3, r9
 80017fc:	460a      	mov	r2, r1
 80017fe:	eb42 0303 	adc.w	r3, r2, r3
 8001802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001806:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800180a:	2200      	movs	r2, #0
 800180c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001810:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8001820:	4649      	mov	r1, r9
 8001822:	008b      	lsls	r3, r1, #2
 8001824:	4641      	mov	r1, r8
 8001826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800182a:	4641      	mov	r1, r8
 800182c:	008a      	lsls	r2, r1, #2
 800182e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001832:	f7fe fcd1 	bl	80001d8 <__aeabi_uldivmod>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <LL_USART_SetBaudRate+0x454>)
 800183c:	fba3 1302 	umull	r1, r3, r3, r2
 8001840:	095b      	lsrs	r3, r3, #5
 8001842:	2164      	movs	r1, #100	; 0x64
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	3332      	adds	r3, #50	; 0x32
 800184e:	4a36      	ldr	r2, [pc, #216]	; (8001928 <LL_USART_SetBaudRate+0x454>)
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	095b      	lsrs	r3, r3, #5
 8001856:	b29b      	uxth	r3, r3
 8001858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800185c:	b29b      	uxth	r3, r3
 800185e:	4423      	add	r3, r4
 8001860:	b29c      	uxth	r4, r3
 8001862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001866:	2200      	movs	r2, #0
 8001868:	67bb      	str	r3, [r7, #120]	; 0x78
 800186a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800186c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001870:	4642      	mov	r2, r8
 8001872:	464b      	mov	r3, r9
 8001874:	1891      	adds	r1, r2, r2
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	415b      	adcs	r3, r3
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001880:	4641      	mov	r1, r8
 8001882:	1851      	adds	r1, r2, r1
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	4649      	mov	r1, r9
 8001888:	414b      	adcs	r3, r1
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001898:	4659      	mov	r1, fp
 800189a:	00cb      	lsls	r3, r1, #3
 800189c:	4651      	mov	r1, sl
 800189e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018a2:	4651      	mov	r1, sl
 80018a4:	00ca      	lsls	r2, r1, #3
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	4642      	mov	r2, r8
 80018ae:	189b      	adds	r3, r3, r2
 80018b0:	673b      	str	r3, [r7, #112]	; 0x70
 80018b2:	464b      	mov	r3, r9
 80018b4:	460a      	mov	r2, r1
 80018b6:	eb42 0303 	adc.w	r3, r2, r3
 80018ba:	677b      	str	r3, [r7, #116]	; 0x74
 80018bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80018c0:	2200      	movs	r2, #0
 80018c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80018c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80018d2:	4649      	mov	r1, r9
 80018d4:	008b      	lsls	r3, r1, #2
 80018d6:	4641      	mov	r1, r8
 80018d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018dc:	4641      	mov	r1, r8
 80018de:	008a      	lsls	r2, r1, #2
 80018e0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80018e4:	f7fe fc78 	bl	80001d8 <__aeabi_uldivmod>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <LL_USART_SetBaudRate+0x454>)
 80018ee:	fba3 1302 	umull	r1, r3, r3, r2
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2164      	movs	r1, #100	; 0x64
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	3332      	adds	r3, #50	; 0x32
 8001900:	4a09      	ldr	r2, [pc, #36]	; (8001928 <LL_USART_SetBaudRate+0x454>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	b29b      	uxth	r3, r3
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	b29b      	uxth	r3, r3
 8001910:	4423      	add	r3, r4
 8001912:	b29b      	uxth	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800191a:	609a      	str	r2, [r3, #8]
}
 800191c:	bf00      	nop
 800191e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001922:	46bd      	mov	sp, r7
 8001924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001928:	51eb851f 	.word	0x51eb851f

0800192c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fd8e 	bl	8001460 <LL_USART_IsEnabled>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d149      	bne.n	80019de <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001952:	f023 030c 	bic.w	r3, r3, #12
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	6851      	ldr	r1, [r2, #4]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	68d2      	ldr	r2, [r2, #12]
 800195e:	4311      	orrs	r1, r2
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	6912      	ldr	r2, [r2, #16]
 8001964:	4311      	orrs	r1, r2
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	6992      	ldr	r2, [r2, #24]
 800196a:	430a      	orrs	r2, r1
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	4619      	mov	r1, r3
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fd85 	bl	8001488 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fd92 	bl	80014ae <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fc9c 	bl	80012cc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <LL_USART_Init+0xbc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d102      	bne.n	80019a2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	e00c      	b.n	80019bc <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a11      	ldr	r2, [pc, #68]	; (80019ec <LL_USART_Init+0xc0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d102      	bne.n	80019b0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	e005      	b.n	80019bc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <LL_USART_Init+0xc4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00d      	beq.n	80019de <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80019ca:	2300      	movs	r3, #0
 80019cc:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fd7b 	bl	80014d4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80019de:	7ffb      	ldrb	r3, [r7, #31]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40011000 	.word	0x40011000
 80019ec:	40004400 	.word	0x40004400
 80019f0:	40011400 	.word	0x40011400

080019f4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <LL_InitTick+0x30>)
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <LL_InitTick+0x30>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <LL_InitTick+0x30>)
 8001a14:	2205      	movs	r2, #5
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ffdd 	bl	80019f4 <LL_InitTick>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <LL_SetSystemCoreClock+0x1c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000000 	.word	0x20000000

08001a64 <__libc_init_array>:
 8001a64:	b570      	push	{r4, r5, r6, lr}
 8001a66:	4d0d      	ldr	r5, [pc, #52]	; (8001a9c <__libc_init_array+0x38>)
 8001a68:	4c0d      	ldr	r4, [pc, #52]	; (8001aa0 <__libc_init_array+0x3c>)
 8001a6a:	1b64      	subs	r4, r4, r5
 8001a6c:	10a4      	asrs	r4, r4, #2
 8001a6e:	2600      	movs	r6, #0
 8001a70:	42a6      	cmp	r6, r4
 8001a72:	d109      	bne.n	8001a88 <__libc_init_array+0x24>
 8001a74:	4d0b      	ldr	r5, [pc, #44]	; (8001aa4 <__libc_init_array+0x40>)
 8001a76:	4c0c      	ldr	r4, [pc, #48]	; (8001aa8 <__libc_init_array+0x44>)
 8001a78:	f000 f818 	bl	8001aac <_init>
 8001a7c:	1b64      	subs	r4, r4, r5
 8001a7e:	10a4      	asrs	r4, r4, #2
 8001a80:	2600      	movs	r6, #0
 8001a82:	42a6      	cmp	r6, r4
 8001a84:	d105      	bne.n	8001a92 <__libc_init_array+0x2e>
 8001a86:	bd70      	pop	{r4, r5, r6, pc}
 8001a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a8c:	4798      	blx	r3
 8001a8e:	3601      	adds	r6, #1
 8001a90:	e7ee      	b.n	8001a70 <__libc_init_array+0xc>
 8001a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a96:	4798      	blx	r3
 8001a98:	3601      	adds	r6, #1
 8001a9a:	e7f2      	b.n	8001a82 <__libc_init_array+0x1e>
 8001a9c:	08001ae4 	.word	0x08001ae4
 8001aa0:	08001ae4 	.word	0x08001ae4
 8001aa4:	08001ae4 	.word	0x08001ae4
 8001aa8:	08001ae8 	.word	0x08001ae8

08001aac <_init>:
 8001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aae:	bf00      	nop
 8001ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ab2:	bc08      	pop	{r3}
 8001ab4:	469e      	mov	lr, r3
 8001ab6:	4770      	bx	lr

08001ab8 <_fini>:
 8001ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aba:	bf00      	nop
 8001abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001abe:	bc08      	pop	{r3}
 8001ac0:	469e      	mov	lr, r3
 8001ac2:	4770      	bx	lr
